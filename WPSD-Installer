#!/usr/bin/env bash

#  +-------------------------------------------------------------------+
#  | W0CHP-PiStar-Dash Installer Script                                |
#  |   by Chip Cuccio (W0CHP)                                          |
#  |   <https://w0chp.net/w0chp-pistar-dash/>                          |
#  | This progam is distributed under the GNU GPL;                     |
#  |   See <http://www.gnu.org/licenses/gpl.html> for lic. info        |
#  +-------------------------------------------------------------------+

# ############################## NOTE ################################ #
#                                                                      #
# NO_SELF_UPDATE=1 # will disable auto update of this script           #
#                                                                      #
# #################################################################### #

# privilege check
if [ "$(id -u)" != "0" ]; then
    echo -e "You need to be root to run this command...\n"
    exit 1
fi

# common vars
W0CHP_INSTALL_SCRIPT_REPO="https://repo.w0chp.net/WPSD-Dev/W0CHP-PiStar-Installer/raw/branch/master/WPSD-Installer"
W0CHP_DASH_REPO="https://repo.w0chp.net/WPSD-Dev/W0CHP-PiStar-Dash.git"
W0CHP_SBIN_REPO="https://repo.w0chp.net/WPSD-Dev/W0CHP-PiStar-sbin.git"
W0CHP_BIN_REPO="https://repo.w0chp.net/WPSD-Dev/W0CHP-PiStar-bin.git"
SUPPORTING_FILES_REPO="https://repo.w0chp.net/WPSD-Dev/W0CHP-PiStar-Installer/raw/branch/master/supporting-files"
PS_SERVICES_SCRIPT="https://repo.w0chp.net/WPSD-Dev/W0CHP-PiStar-sbin/raw/branch/master/pistar-services"
WPSD_MAINT_SCRIPT="https://repo.w0chp.net/WPSD-Dev/W0CHP-PiStar-sbin/raw/branch/master/wpsd-backend-maint"
OFFICIAL_DASH_REPO="https://github.com/AndyTaylorTweet/Pi-Star_DV_Dash.git"
OFFICIAL_SBIN_REPO="https://github.com/AndyTaylorTweet/Pi-Star_Binaries_sbin.git"
OFFICIAL_BIN_REPO="https://github.com/AndyTaylorTweet/Pi-Star_v4_Binaries_Bin.git"
# don't fuck with this unless you're brave and adept at troubleshooting
if [ -z ${W0CHP_DASH_BRANCH} ]; then
    W0CHP_DASH_BRANCH="master"
fi
# internal vars. no need to fuck with these
UPDATE_SELF=${UPDATE_SELF:-1}
UPDATE_URI="${W0CHP_INSTALL_SCRIPT_REPO}"
ROOT_PATH=${ROOT_PATH:-"/"}
WORK_PATH=${WORK_PATH:-"${ROOT_PATH}/root"}
SELFUPDATE_SCRIPT="${WORK_PATH}/.updateScript-W0CHP-pistar.sh"
SUPPORTED_MAJOR="4"
SUPPORTED_MIN_MIN="6"
ALL_ARGS="$@"
installedDashBranch=$(git --work-tree=/var/www/dashboard --git-dir=/var/www/dashboard/.git branch | grep '*' | cut -f2 -d ' ')
W0CHP_BINS="/usr/local/.W0CHP_bin" # legacy...for cleanup

if [[ ${SUPP_COL} -eq 0 ]]; then
    COL_NC='\e[0m' # No Color
    BOLD='\e[1m'
    REVERSE='\e[7m'
    COL_LIGHT_GREEN='\e[1;32m'
    COL_BRIGHT_GREEN='\e[1;92m'
    COL_LIGHT_RED='\e[31m'
    COL_BRIGHT_RED='\e[1;31m'
    COL_LIGHT_CYAN='\e[1;36m'
    COL_REG_CYAN='\e[38;5;30m'
    COL_REG_ORANGE='\e[38;5;173m'
    COL_LIGHT_BLUE='\e[1;46m'
    COL_LIGHT_MAGENTA='\e[1;35m'
    COL_LIGHT_YELLOW='\e[1;93m'
    COL_REG_YELLOW='\e[93m'
    INFO="${BOLD}[i]${COL_NC}"
    NOTE="${BOLD}[${COL_LIGHT_YELLOW}!${COL_NC}]"
    TICK="${BOLD}[${COL_LIGHT_GREEN}✓${COL_NC}]"
    CROSS="${BOLD}[${COL_BRIGHT_RED}✗${COL_NC}]"
    DONE="${BOLD}${COL_LIGHT_GREEN}Done!${COL_NC}"
else
    INFO="[i]"
    NOTE="[!]"
    TICK="[✓]"
    CROSS="[✗]"
    DONE="Done!"
fi

modelName=$(grep -m 1 'model name' /proc/cpuinfo | sed 's/.*: //')
hardwareField=$(grep 'Model' /proc/cpuinfo | sed 's/.*: //')
hwDeetz="${hardwareField} - ${modelName}"
uaStr="WPSD-Installer (${hwDeetz})"

# curl option array
declare -a CURL_OPTIONS=('-Ls' '-A' "${uaStr}")

# pi-star version check. only 4.x is supported.
RELEASE_FILE="/etc/pistar-release"
if [ -f ${RELEASE_FILE} ]; then
    PISTAR_VERSION=$(grep 'Version' /etc/pistar-release | cut -f 2 -d '=' | tr -d ' ' | sed 's/-.*//')
    PISTAR_VERSION_INFO=( ${PISTAR_VERSION//./ })
    if [[ ${PISTAR_VERSION_INFO[0]} -ne ${SUPPORTED_MAJOR} ]] || [[ ${PISTAR_VERSION_INFO[2]} -lt ${SUPPORTED_MIN_MIN} ]]; then
        echo -e "\n${CROSS} ${COL_BRIGHT_RED}ERROR:${COL_NC} Only Pi-Star 4.1.6 or above is supported.\n"
        exit 1
    fi
    if [[ ${UPDATE_SELF} -eq 0 ]]; then
        echo -e "\n${INFO} Detected Pi-Star version: $PISTAR_VERSION (major: ${PISTAR_VERSION_INFO[0]})"
    fi
else
    echo -e "\n${CROSS} ${COL_BRIGHT_RED}ERROR:${COL_NC} You're not running a Pi-Star.\n "
    exit 1
fi

# check if already running W0CHP and set result in var.
if grep W0CHP /var/www/dashboard/config/version.php > /dev/null 2>/dev/null ; then
    RUNNING_W0CHP=1
fi

function CheckPausedMode() {
    # check if user havs paused modes:
    if compgen -G "/etc/*_paused*" > /dev/null ; then
        echo -e "${CROSS} ${COL_BRIGHT_RED}ERROR:${COL_NC} Paused mode(s) deteced..."
        echo -e "    You must unpause your mode(s) in Instant Mode Manager before proceeding."
        exit 1
    fi
}

# connectivity check
conn_check() {
    echo -e "${INFO} Checking for connectivity to the W0CHP Update Server (can take up to 30 seconds; please wait...)"
    status_code=$(curl -m 30 -A "${uaStr}" --write-out %{http_code} --silent --output /dev/null "${W0CHP_DASH_REPO}/info/refs?service=git-upload-pack")
    if [[ $status_code == 20* ]] || [[ $status_code == 30* ]] ; then
	echo -e "${TICK} Connection established!\n"
    else
	echo -e "${CROSS} Cannot connect to the W0CHP Update Server. Try again later. Exiting...\n"
	exit 1
    fi
}

function RemovePlatDet() {
    if [ -f /usr/local/bin/platformDetect.sh ]; then # remove platformDetect.sh since we have a custom version in /usr/local/sbin
        rm -f /usr/local/bin/platformDetect.sh
    fi
}

function _rw() {
    # Prevent the FS to be remounted as RO
    systemctl stop cron.service > /dev/null 2>/dev/null &
    mount -o remount,rw /
}

function _ro() {
    sync
    mount -o remount,ro / > /dev/null 2<&1
    systemctl start cron.service > /dev/null 2>/dev/null &
}

function WaitForUnattendedUpgrade() {
    /usr/bin/systemd-run --property="After=apt-daily.service apt-daily-upgrade.service" --wait /bin/true > /dev/null 2<&1
}

function SaveConfigs () {
    cp -a /etc /tmp > /dev/null 2>/dev/null
}

function RestoreConfigs () {
    cp -a /tmp/etc / > /dev/null 2>/dev/null
    rm -rf /tmp/etc > /dev/null 2>/dev/null
    sed -i '/vnstat/d' /etc/fstab 2>/dev/null
    sed -i '/-RMB//g' /etc/pistar-release 2>/dev/null
    /usr/local/sbin/pistar-services start > /dev/null 2<&1 &
}

# $1 directory
# $2 repo
function ChangeAndCheckoutRepo() {
    # ensure repos can be updated
    if ! grep -q 'safe' /root/.gitconfig > /dev/null 2<&1 ; then
	git config --global --add safe.directory /var/www/dashboard > /dev/null 2<&1
	git config --global --add safe.directory /usr/local/bin > /dev/null 2<&1
	git config --global --add safe.directory /usr/local/sbin > /dev/null 2<&1
    fi
    dir="$1"
    repo="$2"
    if [[ $dir == "/var/www/dashboard" ]] ; then
	AppSec="Web Dashboard Software"
    fi
    if [[ $dir == "/usr/local/bin" ]] ; then
	AppSec="Digital Voice and Related Binaries"
    fi
    if [[ $dir == "/usr/local/sbin" ]] ; then
	AppSec="Scripts and Support Programs"
    fi
    echo -e "${INFO} Retrieving files (${AppSec}) from git repository..."
    echo -e "    * Git repo: ${repo}"
    echo -e "    * Installing ${AppSec} into: \"${dir}\""
    cd "$1"
    cp -a  /var/www/dashboard/config/{config.php,ircddblocal.php,language.php} /tmp/ # save user config files.
    git reset --hard > /dev/null # need this for initial install, since two/three php config files are over-written when user applies config
    git remote add newrepo "$repo" > /dev/null 2<&1
    GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="${uaStr} [req. ${W0CHP_DASH_BRANCH}]" git fetch -q newrepo > /dev/null 2<&1
    git remote remove origin > /dev/null
    git remote rename newrepo origin > /dev/null
    if [[ $dir == "/var/www/dashboard" ]] && [[ ${key} =~ ^(-id|-idc|--install-dashboard|--install-dashboard-css)$ ]]; then # do (specified) branch checkout on dashboard, AND, that it's an install, not a restore...
        git checkout -q "$W0CHP_DASH_BRANCH" > /dev/null 2<&1
        git reset --hard origin/"$W0CHP_DASH_BRANCH" > /dev/null 2<&1
        mv /tmp/{config.php,ircddblocal.php,language.php} /var/www/dashboard/config/ # move back the user config files
        git stash > /dev/null 2<&1 # stash user config files in local repo
        git checkout stash@{0} -- config/config.php config/ircddblocal.php > /dev/null 2<&1 #restore config from stash
        if ! grep -q TIME_FORMAT /var/www/dashboard/config/config.php ; then # insert req'd constant if not found. WIll be stashed on next update :-)
                sed -i "/^date_default_timezone_set.*/i define('TIME_FORMAT', '24');" /var/www/dashboard/config/config.php 
        fi
        git stash clear > /dev/null 2<&1 # housekeeping
        # cache W0CHP-PiStar-Dash git version:
        ver_cmd=$( git --work-tree=/usr/local/sbin --git-dir=/usr/local/sbin/.git rev-parse HEAD | tail -1 | awk '{ print substr($1,1,10) }' ) # last pipe to awk: converts long hash to 10 chars.
        gitRemoteURL=$(git --work-tree=${dir} --git-dir=${dir}/.git config --get remote.origin.url)
        gitBranch="$( git --git-dir=${dir}/.git branch | grep '*' | awk {'print $2'} )"
        gitStatusRemote=$(env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="${uaStr} Version Cacher [req. ${W0CHP_DASH_BRANCH}] Ver.#${ver_cmd}" git ls-remote --heads ${gitRemoteURL} ${dashBranch} | grep ${gitBranch} | awk {'print $1'} | awk '{ print substr($1,1,10) }') # last pipe to awk: converts long hash to 10 chars.
        echo ${gitStatusRemote} > /etc/.W0CHP-PiStar-Dash.remote_version
    else # official pistar restore
        git reset --hard origin/master > /dev/null
        mv /tmp/{config.php,ircddblocal.php,language.php} /var/www/dashboard/config/ # move back the user config files
        git stash > /dev/null 2<&1 # stash user config files in local repo
        git checkout stash@{0} -- config/config.php config/ircddblocal.php config/language.php > /dev/null 2<&1 #restore config  from stash
        git stash clear > /dev/null 2<&1 # housekeeping
    fi
    echo -e "    ${TICK} ${DONE}\n"
}

function ApplyConfigs() {
    echo -e "${INFO} Updating Configuration Files,"
    echo -e "    then restarting all required Services. Please wait."
    echo -e "    This will take some time..."
    _rw
    sleep 5
    _rw
    # temp allow localhost to submit config form without auth to enter new configs
    sed -i '/try_files/i satisfy any;' /etc/nginx/sites-enabled/pi-star
    sed -i '/satisfy any/a allow 127.0.0.1;' /etc/nginx/sites-enabled/pi-star
    sed -i '/allow 127.0.0.1/a deny all;' /etc/nginx/sites-enabled/pi-star
    systemctl restart nginx > /dev/null 2<&1
    sleep 5
    _rw
    sleep 5
    _rw
    # apply config/submit form
    curl -s -X POST -F name=config http://127.0.0.1/admin/configure.php > /dev/null
    curl -s http://127.0.0.1/admin/expert/edit_dashboard.php > /dev/null
    sleep 5
    _rw
    sleep 5
    _rw
    # remove localhost auth bypass
    sed -i '/satisfy any/d' /etc/nginx/sites-enabled/pi-star
    sed -i '/allow 127.0.0.1/d' /etc/nginx/sites-enabled/pi-star
    sed -i '/deny all/d' /etc/nginx/sites-enabled/pi-star
    systemctl restart nginx > /dev/null 2<&1
    sleep 3
    echo -e "    ${TICK} ${DONE}\n"
}

function InstallDashboard() {
    curl "${CURL_OPTIONS[@]}" $PS_SERVICES_SCRIPT -o /tmp/pistar-services
    chmod +x /tmp/pistar-services
    echo -e ""
    echo -e "${INFO} Stopping services. Please wait..."
    /tmp/pistar-services fullstop > /dev/null 2<&1
    WaitForUnattendedUpgrade
    _rw
    sleep 1
    echo -e "    ${TICK} ${DONE}\n"
    if [[ $(grep -- '-RMB' ${RELEASE_FILE}) ]] ; then
        echo -e "${NOTE} ${COL_LIGHT_YELLOW}Note:${COL_NC} Detected F1RMB installation, which can cause conflicts.\n    Uninstalling F1RMB and relaunching the W0CHP-PiStar-Dash installation."
	echo -e "    Please wait..."
	curl "${CURL_OPTIONS[@]}" ${W0CHP_INSTALL_SCRIPT_REPO} -o /tmp/WPSD-Installer
	chmod +x /tmp/WPSD-Installer
	curl -Ls https://raw.githubusercontent.com/f1rmb/f1rmb-pistar/master/f1rmb-pistar | env NO_SELF_UPDATE=1 bash -s -- -ra > /dev/null 2<&1
	echo -e "    ${TICK} F1RMB Removed; Relaunching W0CHP-PiStar-Dash insttallation in 5 seconds..."
	sleep 5 &
	PID=$!
	i=1
	sp='\|/-'
	echo -n '      '
	while [ -d /proc/$PID ]
	do
	    printf "\b${sp:i++%${#sp}:1}"
	done
	exec env UPDATE_SELF=0 /usr/bin/env bash "/tmp/WPSD-Installer" "$ALL_ARGS"
	exit 0
    fi
    echo -e "${INFO} Performing some backend maintence/preparation tasks;"
    echo -e "    which will help improve performance and security."
    echo -e "    Be patient! This will take some time..."
    _rw
    curl "${CURL_OPTIONS[@]}" $WPSD_MAINT_SCRIPT -o /tmp/wpsd-maint
    chmod +x /tmp/wpsd-maint
    /tmp/wpsd-maint > /dev/null 2<&1
    _rw
    systemctl daemon-reload > /dev/null 2>/dev/null & # Restart Systemd to account for any service changes 
    rm -f /tmp/wpsd-maint > /dev/null 2<&1
    echo -e "    ${TICK} ${DONE}\n"

    echo -e "${INFO} Updating Raspberry Pi OS Package Cache..."
    apt-get update > /dev/null
    echo -e "    ${TICK} ${DONE}\n"

    echo -e "${INFO} Checking for required program(s)..."
    if ! [ -x "$(command -v jq)" ]; then
	echo -e "\n${INFO} The 'jq' package was not found. Installing prerequsite, 'jq' and its associated"
	echo -e "    associated libraries from the official Raspberry Pi OS Repository; which helps to"
	echo -e "    mass-manage static Brandmeister Talkgroups and to parse APRS tier-2 server lists."
	echo -e "    This will take some time..."
        apt-get install -y jq > /dev/null
	apt-get clean > /dev/null 2<&1
 	apt-get autoclean > /dev/null 2<&1
        echo -e "    ${TICK} ${DONE}\n"
    else
        echo -e "${TICK} The required 'jq' package was already found! NOT intalling.\n"
    fi

    # Check for gpsd and remove legacy mobilegps
    systemctl disable mobilegps.timer > /dev/null 2<&1
    systemctl disable mobilegps.service > /dev/null 2<&1
    if compgen -G "/lib/systemd/system/mobilegps*" > /dev/null; then
	rm -rf /lib/systemd/system/mobilegps*
    fi
    if ! [ -x "$(command -v gpsd)" ]; then 
        echo -e "${INFO} The 'gpsd' package was not found. Installing prerequsite, 'gpsd' and its"
        echo -e "    associated libraries from the official Raspberry Pi OS Repository."
        echo -e "    'gpsd' replaces the legacy and deprecated MobileGPS program."
	echo -e "    This will take some time..."
        apt-get install -y libgps-dev gpsd > /dev/null 2>&1
	apt-get clean > /dev/null 2<&1
 	apt-get autoclean > /dev/null 2<&1
        echo -e "    ${TICK} ${DONE}\n"
    else
        echo -e "${TICK} The required 'gpsd' package was already found! NOT intalling.\n"
    fi

    if ! [ -x "$(command -v vnstat)" ]; then 
        echo -e "${INFO} The 'vnstat' package was not found. Installing prerequsite, 'vnstat' from the"
        echo -e "    official Raspberry Pi OS Repository."
        echo -e "    'vnstat' measures and logs network traffic used in the system/hardware info section."
	echo -e "    This will take some time..."
        apt-get install -y vnstat > /dev/null 2>&1
	apt-get clean > /dev/null 2<&1
 	apt-get autoclean > /dev/null 2<&1
	# tmpfs for vnstat
	if ! grep -q vnstat /etc/fstab ; then
	    systemctl stop vnstat.service > /dev/null
	    rm -rf /var/lib/vnstat > /dev/null
	    mkdir -p /var/lib/vnstat > /dev/null
	    chown -R vnstat:vnstat /var/lib/vnstat > /dev/null
	    echo "tmpfs                   /var/lib/vnstat         tmpfs   nodev,noatime,nosuid,mode=0755,size=64m         0       0"  >> /etc/fstab
	    mount /var/lib/vnstat > /dev/null
	    chown -R vnstat:vnstat /var/lib/vnstat > /dev/null
	    systemctl restart vnstat.service > /dev/null
	fi
        echo -e "    ${TICK} ${DONE}\n"
    else
        echo -e "${TICK} The required 'vnstat' package was already found! NOT intalling.\n"
    fi

    ChangeAndCheckoutRepo "/var/www/dashboard" "$W0CHP_DASH_REPO"
    ChangeAndCheckoutRepo "/usr/local/sbin" "$W0CHP_SBIN_REPO"
    ChangeAndCheckoutRepo "/usr/local/bin" "$W0CHP_BIN_REPO"
 
    chown -R www-data:www-data /var/www/dashboard > /dev/null 2<&1

    # Update pertinent versions in /etc/pistar-release
    # add HW cache to rc.local
    # cleanup legacy naming convention
    if grep -q 'modemcache' /etc/rc.local ; then
        sed -i 's/modemcache/hwcache/g' /etc/rc.local
        sed -i 's/# cache modem info/# cache hw info/g' /etc/rc.local 
    fi
    # add hw cache to rc.local
    if ! grep -q 'hwcache' /etc/rc.local ; then
        sed -i '/^\/usr\/local\/sbin\/pistar-motdgen/a \\n\n# cache hw info\n\/usr\/local\/sbin\/pistar-hwcache' /etc/rc.local 
        /usr/local/sbin/pistar-hwcache > /dev/null 2<&1
    else
        /usr/local/sbin/pistar-hwcache > /dev/null 2<&1
    fi

    # migrate config update notice
    if grep -q ConfUpdReqd /etc/mmdvmhost ; then
	grep ConfUpdReqd /etc/mmdvmhost | sed 's/=/ = /' >> /etc/pistar-release
	sed -i '/^\[WPSD\]/d' /etc/mmdvmhost
	sed -i '/^ConfUpdReqd/d' /etc/mmdvmhost
    else
	if ! grep -q ConfUpdReqd /etc/pistar-release ; then
	    echo "ConfUpdReqd = " >> /etc/pistar-release
	fi
    fi
    # migrate UUID
    if [ -f /etc/WPSD-release ]; then
        uuidLen=$( grep UUID /etc/pistar-release | awk '{print $3}' | wc -m > /dev/null )
        if [[ "${uuidLen}"  -gt "17" ]] ; then
            rm -f /etc/WPSD-release
            GU=$( cat /proc/cpuinfo | grep Serial | cut -d ' ' -f 2 )
            echo "UUID = $GU" >> /etc/pistar-release
        else
            echo "UUID = $UUIDck" >> /etc/pistar-release
            rm -f /etc/WPSD-release
        fi
    else
        if ! grep -q UUID /etc/pistar-release ; then
            GU=$( cat /proc/cpuinfo | grep Serial | cut -d ' ' -f 2 )
            echo "UUID = $GU" >> /etc/pistar-release
        fi
    fi
    uuidLen=$( grep UUID /etc/pistar-release | awk '{print $3}' | wc -m > /dev/null )
    if [[ "${uuidLen}"  -gt "17" ]] ; then
        GU=$( cat /proc/cpuinfo | grep Serial | cut -d ' ' -f 2 )
        sed -i "/UUID/c\\UUID = ${GU}" /etc/pistar-release
    fi
    if ! [ $( grep UUID /etc/pistar-release | awk '{print $3}' > /dev/null ) ] ; then
        GU=$( cat /proc/cpuinfo | grep Serial | cut -d ' ' -f 2 )
        sed -i "/UUID/c\\UUID = ${GU}" /etc/pistar-release
    fi
    echo -e "${INFO} Updating Hostfiles, User ID DB's & Various Talkgroup Lists."
    echo -e "    This will take some time..."
    if ! [ -f /root/M17Hosts.txt ]; then
        echo -e "# Format: Reflector Name IP Port\n# Example:\n# M17-000    81.231.241.25    17000\n\n" > /root/M17Hosts.txt
    fi
    /bin/bash /usr/local/sbin/HostFilesUpdate.sh  > /dev/null 2<&1
    echo -e "    ${TICK} ${DONE}\n"

    echo -e "${INFO} Performing final tasks & starting services. Please wait..."

    checkMMDVMhostINI=$(grep -A 15 "DMR Network" /etc/mmdvmhost | grep -v "DMR Network" | grep -v '^\d*$' | grep "RemoteAddress=127.0.0.1")
    if [[ ! ${checkMMDVMhostINI} ]] ; then
        sed -i '/\[DMR Network\]/a RemoteAddress=127.0.0.1' /etc/mmdvmhost # need this for new conf. dicts.
    fi

    # set log perms for newer bins...
    chown -R mmdvm:mmdvm /var/log/pi-star > /dev/null 2<&1
    chmod 775 /var/log/pi-star > /dev/null 2<&1

    /usr/local/sbin/pistar-motdgen

    # Add pistar-service bash completion
    DEST="/usr/share/bash-completion/completions/pistar-services"
    echo "#!/bin/bash" > $DEST
    echo "" >> $DEST
    echo "_pistar_services()" >> $DEST
    echo "{" >> $DEST
    echo "    local cur prev words cword" >> $DEST
    echo "    _init_completion -n = || return" >> $DEST
    echo "" >> $DEST
    echo "    _expand || return 0" >> $DEST
    echo "" >> $DEST
    echo "    COMPREPLY=( \$( compgen -W 'start stop restart fullstop status' -- \"\$cur\" ) )" >> $DEST
    echo "" >> $DEST
    echo "} &&" >> $DEST
    echo "complete -F _pistar_services pistar-services" >> $DEST
    echo "" >> $DEST
    chown root:root $DEST
    chmod 0644 $DEST

    # install and run KN2TOD's systemd mmdvmhost log backup services
    curl "${CURL_OPTIONS[@]}" $SUPPORTING_FILES_REPO/Build-MMDVM-Log-Systemd-Tasks.sh -o /tmp/Build-MMDVM-Log-Systemd-Tasks.sh
    bash /tmp/Build-MMDVM-Log-Systemd-Tasks.sh > /dev/null 2<&1
    rm /tmp/Build-MMDVM-Log-Systemd-Tasks.sh

    # Setup systemd unit files for Nextion Driver
    if  [ ! -f "/etc/systemd/system/mmdvmhost.service.requires/nextiondriver.service" ] ; then
    	curl "${CURL_OPTIONS[@]}" $SUPPORTING_FILES_REPO/nextiondriver.service -o /lib/systemd/system/nextiondriver.service
    	# Enable the NextionDriver service
    	systemctl daemon-reload > /dev/null 2<&1
    	systemctl stop nextiondriver.service > /dev/null 2<&1
    	/usr/bin/killall NextionDriver > /dev/null 2<&1
    	systemctl enable nextiondriver.service > /dev/null 2<&1
    	systemctl restart nextiondriver.service > /dev/null 2<&1
    	systemctl restart mmdvmhost.service > /dev/null 2<&1
    fi
    if [ -f '/etc/systemd/system/mmdvmhost.service.requires/nextiondriver.service' ] ; then
    	if ! grep -qo 'killall' /lib/systemd/system/nextiondriver.service ; then
            curl "${CURL_OPTIONS[@]}" $SUPPORTING_FILES_REPO/nextiondriver.service -o /lib/systemd/system/nextiondriver.service
            systemctl daemon-reload > /dev/null 2<&1
            systemctl stop nextiondriver.service > /dev/null 2<&1
            /usr/bin/killall NextionDriver > /dev/null 2<&1
            systemctl enable nextiondriver.service > /dev/null 2<&1
            systemctl restart nextiondriver.service > /dev/null 2<&1
            systemctl restart mmdvmhost.service > /dev/null 2<&1
	fi
    fi
    # now, disable nextion driver stuff if it's not config'd in mmdvmhost...
    if [ "`sed -nr "/^\[General\]/,/^\[/{ :l /^\s*[^#].*/ p; n; /^\[/ q; b l; }" /etc/mmdvmhost | grep "Display" | cut -d= -f 2`" != "Nextion" ]; then
    	if grep -qo 'nextiondriver' /lib/systemd/system/mmdvmhost.service ; then
            sed -i '/nextiondriver/d' /lib/systemd/system/mmdvmhost.service
            systemctl daemon-reload > /dev/null 2<&1
    	fi
    	systemctl stop nextiondriver.service > /dev/null 2<&1
    	/usr/bin/killall NextionDriver > /dev/null 2<&1
    	systemctl disable nextiondriver.service > /dev/null 2<&1
    	systemctl mask nextiondriver.service > /dev/null 2<&1
    	systemctl daemon-reload > /dev/null 2<&1
    fi

    # install m17gw unit flile
    if [ ! -f "/etc/systemd/system/m17gateway.service" ] ; then
	/usr/local/sbin/m17gateway.service install > /dev/null 2<&1
	systemctl daemon-reload > /dev/null 2<&1
    fi

    _rw
    if [[ ${NO_AC} -ne 1 ]]; then 
        ApplyConfigs
    fi
    /tmp/pistar-services restart > /dev/null 2<&1 &

    rm /tmp/pistar-services

    # retain fw setting if reinstalling
    if [[ $RUNNING_W0CHP ]] ; then
	if ! grep -q LOGNDROP /etc/iptables.rules ; then
	    /usr/local/sbin/pistar-system-manager -dfw > /dev/null 2<&1
	fi
    fi

    # cache installer
    curl "${CURL_OPTIONS[@]}" ${W0CHP_INSTALL_SCRIPT_REPO} -o /usr/sbin/WPSD-Installer
    chmod +x /usr/sbin/WPSD-Installer

    echo -e "    ${TICK} ${DONE}\n"
    
    echo -e "${TICK} ${COL_LIGHT_CYAN}W0CHP-PiStar-Dash Installation Complete!${COL_NC}\n" 
}

function InstallCSS() {
    WaitForUnattendedUpgrade
    # Are we already running W0CHP Dash with user CSS? If so, leave all CSS alone...
    if [[ $RUNNING_W0CHP ]] && [ -f "/etc/pistar-css.ini" ]; then
        echo -e "\n${INFO} NOTE: Installation of CSS requested; however, W0CHP-PiStar-Dash"
        echo -e "    installation and custom CSS detected... Leaving CSS alone."
    # check for user's css (if any, back it up, and install W0CHP version)
    elif [ -f "/etc/pistar-css.ini" ]; then
        mv /etc/pistar-css.ini /etc/.pistar-css.ini.user
        curl "${CURL_OPTIONS[@]}" $SUPPORTING_FILES_REPO/pistar-css-W0CHP.ini -o /etc/pistar-css.ini
    # otherwise, simply install W0CHP css
    else
        curl "${CURL_OPTIONS[@]}" $SUPPORTING_FILES_REPO/pistar-css-W0CHP.ini -o /etc/pistar-css.ini
    fi
}

function MapCSS() {
    WaitForUnattendedUpgrade
    # ensure no user W0CHP css exists and install stock color mapping to new selectors
    if [[ ! $RUNNING_W0CHP ]] && [ ! -f "/etc/pistar-css.ini" ]; then
        #curl "${CURL_OPTIONS[@]}" $SUPPORTING_FILES_REPO/pistar-css-dist.ini -o /etc/pistar-css.ini
        echo "" > /dev/null
    # are we running W0CHP with user css? if so, bail
    elif [[ $RUNNING_W0CHP ]] && [ -f "/etc/pistar-css.ini" ]; then
        echo -e "\n${INFO} NOTE: W0CHP-PiStar-Dash installation and custom CSS detected."
        echo -e "    Not mapping stock CSS. Leaving custom CSS alone."
    # otherwise, not running W0CHP dash, but user has css: make a backup of user's css and map stock css
    elif [[ ! $RUNNING_W0CHP ]] && [ -f "/etc/pistar-css.ini" ]; then
        mv /etc/pistar-css.ini /etc/.pistar-css.ini.user
        #curl "${CURL_OPTIONS[@]}" $SUPPORTING_FILES_REPO/pistar-css-dist.ini -o /etc/pistar-css.ini
        echo -e "\n${INFO} ${COL_LIGHT_YELLOW}NOTE: Custom CSS detected. Making backup and${COL_NC}"
        echo -e "    ${COL_LIGHT_YELLOW}mapping stock Pi-Star colors. To re-map/re-customize${COL_NC}"
        echo -e "    ${COL_LIGHT_YELLOW}your CSS manually, please see:${COL_NC}"
        echo -e "    ${COL_LIGHT_YELLOW}<https://w0chp.net/w0chp-pistar-dash/#css-notes>${COL_NC}"
    fi
}

function CleanStrayFiles() {
    echo -e "${INFO} Cleaning up stray W0CHP-PiStar-Dash Files..."
    if compgen -G "/usr/local/etc/BM_TGs.json*" > /dev/null; then
        rm -r /usr/local/etc/BM_TGs.json*
    fi
    if compgen -G "/var/www/dashboard/.bm_tgs.json*" > /dev/null; then
        rm -r /var/www/dashboard/.bm_tgs.json*
    fi
    if compgen -G "/usr/local/etc/tgif-talkgroups*" > /dev/null; then
        rm -r /usr/local/etc/tgif-talkgroups*
    fi
    if compgen -G "/etc/.GETNAMES*" > /dev/null; then
        rm -r /etc/.GETNAMES*
    fi
    if compgen -G "/etc/.CALLERDETAILS*" > /dev/null; then
        rm -r /etc/.CALLERDETAILS*
    fi
    if compgen -G "/etc/.TGNAMES*" > /dev/null; then
        rm -r /etc/.TGNAMES*
    fi
    if compgen -G "/etc/.W0CHP-PiStar-Dash.remote_version*" > /dev/null; then
        rm -r /etc/.W0CHP-PiStar-Dash.remote_version*
    fi
    if compgen -G "/usr/local/bin/README.md*" > /dev/null; then
        rm -r /usr/local/bin/README.md*
    fi
    if compgen -G "/usr/sbin/WPSD-Installer*" > /dev/null; then
	rm -r /usr/sbin/WPSD-Installer*
    fi
    if compgen -G "/etc/tinyfilemanager-*" > /dev/null; then
        rm -r /etc/tinyfilemanager-*
    fi
    #remove mmdvmhost log backup services
    rm -rf /etc/systemd/system/default.target.wants/mmdvm-log-restore.service \
	/etc/systemd/system/multi-user.target.wants/mmdvm-log-backup.service \
	/etc/systemd/system/shutdown.target.wants/mmdvm-log-shutdown.service \
	/etc/systemd/system/timers.target.wants/mmdvm-log-backup.timer \
	/lib/systemd/system/mmdvm-log-backup.service \
	/lib/systemd/system/mmdvm-log-backup.timer \
	/lib/systemd/system/mmdvm-log-restore.service \
	/lib/systemd/system/mmdvm-log-shutdown.service
    systemctl daemon-reload > /dev/null 2<&1 
    if [[ -d ${W0CHP_BINS} ]] ; then # legacy - for cleanup
        rm -rf ${W0CHP_BINS}
    fi
    echo -e "    ${TICK} ${DONE}\n"
}

function BullseyeChk () {
    lsb_release -cs | grep 'bullseye' &> /dev/null # if this is my bullseye image, there's nothing to "restore"...
    if [ $? == 0 ]; then
	echo -e "${NOTE} You are running the custom Bullseye-based W0CHP-PiStar-Dash disk image...there is nothing to restore!\n"
	exit 1
    fi
}

function RestoreDashboard() {
    curl "${CURL_OPTIONS[@]}" $PS_SERVICES_SCRIPT -o /tmp/pistar-services
    chmod +x /tmp/pistar-services
    echo -e "${INFO} Stopping all Pi-Star Services. Please wait..."
    /tmp/pistar-services fullstop > /dev/null 2<&1
    WaitForUnattendedUpgrade
    sleep 1
    # remove m17gw unit files
    /usr/local/sbin/m17gateway.service uninstall > /dev/null 2<&1
    # Revert MobileGPS
    systemctl disable mobilegps.timer > /dev/null 2<&1
    if [ ! -f "/etc/mobilegps" ]; then
        curl "${CURL_OPTIONS[@]}" $SUPPORTING_FILES_REPO/mobilegps -o /etc/mobilegps
        chown -R www-data:www-data /etc/mobilegps
    fi
    rm -f /lib/systemd/system/mobilegps.timer
    echo '[Unit]' > /lib/systemd/system/mobilegps.service
    echo 'Description=Pi-Star MobileGPS Service' >> /lib/systemd/system/mobilegps.service
    echo 'After=syslog.target network.target' >> /lib/systemd/system/mobilegps.service
    echo '' >> /lib/systemd/system/mobilegps.service
    echo '[Service]' >> /lib/systemd/system/mobilegps.service
    echo 'Type=forking' >> /lib/systemd/system/mobilegps.service
    echo 'ExecStart=/usr/local/sbin/mobilegps.service start' >> /lib/systemd/system/mobilegps.service
    echo 'ExecStop=/usr/local/sbin/mobilegps.service stop' >> /lib/systemd/system/mobilegps.service
    echo 'ExecReload=/usr/local/sbin/mobilegps.service restart' >> /lib/systemd/system/mobilegps.service
    echo '' >> /lib/systemd/system/mobilegps.service
    echo '[Install]' >> /lib/systemd/system/mobilegps.service
    echo 'WantedBy=multi-user.target' >> /lib/systemd/system/mobilegps.service
    # Enable the service
    systemctl daemon-reload > /dev/null 2<&1
    systemctl enable mobilegps.service > /dev/null 2<&1
    echo -e "    ${TICK} ${DONE}"
    echo -e ""

    # Remove pistar-service bash completion
    rm -f /usr/share/bash-completion/completions/pistar-services

    ChangeAndCheckoutRepo "/var/www/dashboard" "$OFFICIAL_DASH_REPO"
    ChangeAndCheckoutRepo "/usr/local/sbin" "$OFFICIAL_SBIN_REPO"
    ChangeAndCheckoutRepo "/usr/local/bin" "$OFFICIAL_BIN_REPO"

    # orig motd:
    /usr/local/sbin/pistar-motdgen

    # more cleanup
    sed -i '/cache modem info/d' /etc/rc.local
    sed -i '/pistar-modemcache/d' /etc/rc.local
    systemctl stop vnstat.service > /dev/null
    umount /var/lib/vnstat > /dev/null
    sed -i '/vnstat/d' /etc/fstab
    echo -e "${INFO} Removing packages specific to W0CHP-PiStar-Dash, which"
    echo -e "    are no longer required.\n    This will take some time..."
    if  [ -x "$(command -v jq)" ]; then
        apt-get purge -y jq libgps-dev gpsd vnstat > /dev/null
        apt-get autoremove -y > /dev/null
        echo -e "    ${TICK} ${DONE}"
    else
        echo -e "    ${TICK} Non-required packages already removed."
    fi

    # re-init stock Pi-Star FW:
    echo -e "\n${INFO} Reinitializing Pi-Star firewall..."
    /usr/local/sbin/pistar-firewall > /dev/null 2<&1
    echo -e "    ${TICK} ${DONE}\n"

    # Put platformDetect.sh and orig/official bins back..
    cd /usr/local/bin
    git stash clear > /dev/null 2<&1 # housekeeping
    git --work-tree=/usr/local/bin --git-dir=/usr/local/bin/.git reset --hard > /dev/null

    echo -e "${INFO} Reverting all Original Pi-Star Services."
    echo -e "    Be patient! This will take some time..."
    # Enable unattended-upgrades
    systemctl unmask unattended-upgrades > /dev/null 2<&1
    LC_ALL=C systemctl enable unattended-upgrades > /dev/null 2<&1
    # Enable SAMBA
    systemctl unmask smbd > /dev/null 2<&1
    systemctl unmask nmbd > /dev/null 2<&1
    LC_ALL=C systemctl enable smbd > /dev/null 2<&1
    LC_ALL=C systemctl enable nmbd > /dev/null 2<&1
    # revert stock avahi config
    rm -rf /etc/avahi/services/
    mv /etc/avahi/avahi-daemon.conf.dist /etc/avahi/avahi-daemon.conf > /dev/null 2<&1
    systemctl restart avahi-daemon > /dev/null 2<&1
    /bin/bash /usr/local/sbin/HostFilesUpdate.sh  > /dev/null 2<&1
    if [[ ${NO_AC} -ne 1 ]]; then
        ApplyConfigs
    fi
    # restart WPSD services once more
    /tmp/pistar-services restart > /dev/null 2<&1
    if [ -f "/tmp/pistar-services" ] ; then
        rm /tmp/pistar-services
    fi
    echo -e "    ${TICK} ${DONE}\n"
    # remove custon "Name:" field from MMDVMHost logs:
    sed -i 's/- Name:.*//g' /var/log/pi-star/MMDVM-*.log  > /dev/null 2<&1
}

function UpdateSelf() {
    _rw
    echo -e "${INFO} Performing self-update..."
    local _tempFileName="$0.tmp"

    if ! eval curl -Ls --output "${_tempFileName}" "${UPDATE_URI}"; then
        echo -e "${CROSS} ${COL_BRIGHT_RED}ERROR:${COL_NC} Failed to download update for installation script!"
	echo -e "You may have disk or network issues on your end."
        exit 1
    fi
    
    if [[ "$(tail -1 ${_tempFileName})" != '# end marker' ]]; then
        echo -e "${CROSS} ${COL_BRIGHT_RED}ERROR:${COL_NC} Failed to download update for installation script!"
        echo -e "Contents of file is not as expected; you may have disk or network issues on your end."
        exit 1
    fi
    
    local OCTAL_MODE=$(stat -c '%a' "$0")
    if ! chmod ${OCTAL_MODE} "${_tempFileName}" ; then
        echo -e "${CROSS} ${COL_BRIGHT_RED}ERROR:${COL_NC} Error while trying to set mode on ${_tempFileName}"
        exit 1
    fi
    
    cat > "${SELFUPDATE_SCRIPT}" << EOF
      	mount -o remount,rw /
    	mount -o remount,rw /boot
        if mv "${_tempFileName}" "$0"; then
           rm -- "\$0"
           exec env UPDATE_SELF=0 /usr/bin/env bash "$0" "$ALL_ARGS"
        else
           echo "ERROR: Failed!"
        fi
EOF

    echo -e "${INFO} Relaunching after update..."
    exec /usr/bin/env bash "${SELFUPDATE_SCRIPT}"
}

function DisplayConfigUpdate() {
    echo -e "${COL_LIGHT_YELLOW} ************************ NOTICE *************************"
    echo -e " *                                                       *"
    echo -e " *   Now you need to refresh your hotspot webpage in     *"
    echo -e " *         order to see the changes take effect.         *"
    echo -e " *                                                       *"
    echo -e " *********************************************************"
    echo -e "${COL_NC}"
}

# $1 directory
# $2 original repo
function DisplayRepoStatus() {
    dir="$1"

    case $1 in
	"/var/www/dashboard")
	    TARGET="Web Dashboard Software"
	    ;;
	"/usr/local/sbin")
	    TARGET="Scripts and Support Programs"
	    ;;
	"/usr/local/bin")
	    TARGET="Digital Voice and Related Binaries"
	    ;;
    esac

    repo=$(git --work-tree=${dir} --git-dir=${dir}/.git config --get remote.origin.url)
    branch=$(git --work-tree=${dir} --git-dir=${dir}/.git branch | grep '*' | cut -f2 -d ' ')
    ver_cmd=$( git --work-tree=${dir} --git-dir=${dir}/.git rev-parse HEAD | tail -1 | awk '{ print substr($1,1,10) }' ) # last pipe to awk: converts long hash to 10 chars.
    if [ "${branch}" != "master" ] ; then
        echo -e "  $TARGET:\n\tOn the '${BOLD}${branch}${COL_NC}' branch; Ver. # ${COL_REG_YELLOW}${ver_cmd}${COL_NC}\n"
    else
        echo -e "  $TARGET:\n\tVer. # ${COL_REG_YELLOW}${ver_cmd}${COL_NC}\n"
    fi
}

function DisplayStatus() {
    echo -e "${COL_LIGHT_CYAN}W0CHP-PiStar-Dash${COL_NC} Version Status"
    echo -e "--------------------------------"
    DisplayRepoStatus "/var/www/dashboard"
    DisplayRepoStatus "/usr/local/sbin"
    DisplayRepoStatus "/usr/local/bin"
}

function WarnForCrappyHW() {
    if [ $( uname -m ) == "armv6l" ] ; then
	echo -e "\n${NOTE} Note:"
	echo -e "    You are running an older and under-powered system (${COL_LIGHT_RED}${hardwareField} [$( uname -m)]${COL_NC})."
	echo -e "    W0CHP-PiStar-Dash will run quite slowly on your weak hardware."
	echo -e "    You've been warned! If you wish to uninstall, run:"
	echo -e "    ${COL_REG_YELLOW}curl -Ls https://w0chp.net/WPSD-Installer | sudo env NO_SELF_UPDATE=1 bash -s -- -rd${COL_NC}"
    fi
}

function DisplayHelp() {
    echo ""
    echo -e "${INFO} ${COL_LIGHT_CYAN}W0CHP PiStar-Dash Installer Command Usage:${COL_NC}"
    echo ""
    echo "  -h,   --help                  :  Display this help text"
    echo ""
    echo ""
    echo "  -id,  --install-dashboard     :  Install W0CHP dashboard"
    echo ""
    echo ""
    echo "  -idc  --install-dashboard-css :  Install W0CHP dashboard"
    echo "				   WITH custom stylesheet"
    echo ""
    echo "  -rd,  --restore-dashboard     :  Restore original dashboard"
    echo ""
    echo ""
    echo "  -s,   --status                :  Display version status / info"
    echo ""
}

if [ $# -eq 0 ]; then
    DisplayHelp
    exit 1
fi

if [ -z "$NO_SELF_UPDATE" -a x"$NO_UPDATE_SELF" != "x1" ]; then
    if [[ ${UPDATE_SELF} -ne 0 ]]; then
        UpdateSelf
    else
        rm -f "${SELFUPDATE_SCRIPT}"
    fi
fi

function DisplayBanner() {
echo -e "${COL_REG_CYAN}
 ▄         ▄   ▄▄▄▄▄▄▄▄▄   ▄▄▄▄▄▄▄▄▄▄▄  ▄         ▄  ▄▄▄▄▄▄▄▄▄▄▄ 
▐░▌       ▐░▌ ▐░░░░░░░░░▌ ▐░░░░░░░░░░░▌▐░▌       ▐░▌▐░░░░░░░░░░░▌
▐░▌       ▐░▌▐░█░█▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀▀▀ ▐░▌       ▐░▌▐░█▀▀▀▀▀▀▀█░▌
▐░▌       ▐░▌▐░▌▐░▌    ▐░▌▐░▌          ▐░▌       ▐░▌▐░▌       ▐░▌
▐░▌   ▄   ▐░▌▐░▌ ▐░▌   ▐░▌▐░▌          ▐░█▄▄▄▄▄▄▄█░▌▐░█▄▄▄▄▄▄▄█░▌
▐░▌  ▐░▌  ▐░▌▐░▌  ▐░▌  ▐░▌▐░▌          ▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌
▐░▌ ▐░▌░▌ ▐░▌▐░▌   ▐░▌ ▐░▌▐░▌          ▐░█▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀▀▀ 
▐░▌▐░▌ ▐░▌▐░▌▐░▌    ▐░▌▐░▌▐░▌          ▐░▌       ▐░▌▐░▌          
▐░▌░▌   ▐░▐░▌▐░█▄▄▄▄▄█░█░▌▐░█▄▄▄▄▄▄▄▄▄ ▐░▌       ▐░▌▐░▌          
▐░░▌     ▐░░▌ ▐░░░░░░░░░▌ ▐░░░░░░░░░░░▌▐░▌       ▐░▌▐░▌          
 ▀▀       ▀▀   ▀▀▀▀▀▀▀▀▀   ▀▀▀▀▀▀▀▀▀▀▀  ▀         ▀  ▀ ${COL_NC}
${COL_REG_CYAN}
                             PiStar-Dash${COL_NC}"
}

function SorryNotSorry() {
echo -e ${COL_BRIGHT_RED}"
      ▄▄▄▄▀▀▀▀▀▀▀▀▄▄▄▄▄▄
     █░░░░▒▒▒▒▒▒▒▒▒▒▒▒░░▀▀▄
    █░░░▒▒▒▒▒▒░░░░░░░░▒▒▒░░█
   █░░░░░░▄██▀▄▄░░░░░▄▄▄░░░░█
 ▄▀▒▄▄▄▒░█▀▀▀▀▄▄█░░░██▄▄█░░░░█
█░▒█▒▄░▀▄▄▄▀░░░░░░░░█░░░▒▒▒▒▒░█
█░▒█░█▀▄▄░░░░░█▀░░░░▀▄░░▄▀▀▀▄▒█
 █░▀▄░█▄░█▀▄▄░▀░▀▀░▄▄▀░░░░█░░█
  █░░░▀▄▀█▄▄░█▀▀▀▄▄▄▄▀▀█▀██░█
   █░░░░██░░▀█▄▄▄█▄▄█▄████░█
    █░░░░▀▀▄░█░░░█░█▀██████░█
     ▀▄░░░░░▀▀▄▄▄█▄█▄█▄█▄▀░░█
       ▀▄▄░▒▒▒▒░░░░░░░░░░▒░░░█
          ▀▀▄▄░▒▒▒▒▒▒▒▒▒▒░░░░█
              ▀▄▄▄▄▄░░░░░░░░█

Sorry, Not Sorry to See You Go!${COL_NC}\n"
}

## Parse command line
while [[ $# -gt 0 ]]; do
    key="$1"

    case $key in
	"-id" | "--install-dashboard")
            clear
	    CheckPausedMode
	    conn_check
	    if [[ $RUNNING_W0CHP ]] ; then
		DisplayBanner
	    	echo -e "\n${INFO} W0CHP-PiStar-Dash software installation detected...AWESOME! ${COL_LIGHT_GREEN}:-)${COL_NC}"
	    	echo -e "    Re-Installing the W0CHP-PiStar-Dash software.\n    This will take some time..."
            	WarnForCrappyHW
            	_rw
            	MapCSS
            	SaveConfigs
            	_rw
            	InstallDashboard
            	RemovePlatDet
            	_rw
            	RestoreConfigs
            	DisplayConfigUpdate
	    else
		DisplayBanner
	    	echo -e "\n${INFO} Installing the W0CHP-PiStar-Dash software.\n    This will take some time..."
           	WarnForCrappyHW
            	_rw
            	MapCSS
            	InstallDashboard
            	RemovePlatDet
            	DisplayConfigUpdate
	    fi
	    systemctl start cron.service > /dev/null 2>/dev/null &
	    shift
	    ;;

	"-idc" | "--install-dashboard-css")
            clear
            CheckPausedMode
	    conn_check
	    if [[ $RUNNING_W0CHP ]] ; then
		DisplayBanner
	    	echo -e "\n${INFO} W0CHP-PiStar-Dash software installation detected...AWESOME! ${COL_LIGHT_GREEN}:-)${COL_NC}"
	    	echo -e "    Re-Installing the W0CHP-PiStar-Dash software.\n    This will take some time..."
	     	WarnForCrappyHW
            	_rw
            	InstallCSS
            	SaveConfigs
            	_rw
            	InstallDashboard
            	RemovePlatDet
            	_rw
            	RestoreConfigs
            	DisplayConfigUpdate
	    else
		DisplayBanner
	    	echo -e "\n${INFO} Installing the W0CHP-PiStar-Dash software.\n    This will take some time..."
	   	WarnForCrappyHW
            	_rw
	    	InstallCSS
	    	InstallDashboard
	    	RemovePlatDet
	    	DisplayConfigUpdate
	    fi
	    systemctl start cron.service > /dev/null 2>/dev/null &
	    shift
	    ;;

	"-rd" | "--restore-dashboard")
            clear
	    BullseyeChk
	    SorryNotSorry
            CheckPausedMode
	    echo -e "\n${INFO} Restoring the original Pi-Star dashboard and files.\n    This will take some time...\n"
	    _rw
            SaveConfigs
            _rw
	    RestoreDashboard
            _rw
            RestoreConfigs
            _rw
	    CleanStrayFiles
	    _rw
	    if [ -f "/etc/pistar-css.ini" ]; then
                rm -f /etc/pistar-css.ini
            fi
	    DisplayConfigUpdate
	    _rw
	    /usr/local/sbin/pistar-motdgen
	    systemctl start cron.service > /dev/null 2>/dev/null &
	    echo -e "${TICK} ${COL_LIGHT_GREEN}Official Pi-Star Dashboard and files restoration complete!${COL_NC}\n"
	    shift
	    ;;

	"-s" | "--status")
	    echo ""
	    DisplayStatus
	    shift
	    ;;

	"-h" | "--help")
	    DisplayHelp
	    shift
	    ;;

	*)
	    DisplayHelp;
	    exit 1
	    ;;
    esac
done

exit 0
# end marker
