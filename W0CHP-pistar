#!/usr/bin/env bash

#  +-------------------------------------------------------------------+
#  | W0CHP-PiStar-Dash Installer Script                                |
#  |   by Chip Cuccio (W0CHP)                                          |
#  |   <https://w0chp.net/w0chp-pistar-dash/>                          |
#  | This progam is distributed under the GNU GPL;                     |
#  |   See <http://www.gnu.org/licenses/gpl.html> for lic. info        |
#  +-------------------------------------------------------------------+

# ############################## NOTE ################################ #
#                                                                      #
# NO_SELF_UPDATE=1 # will disable auto update of this script           #
#                                                                      #
# #################################################################### #

# privilege check
if [ "$(id -u)" != "0" ]; then
    echo -e "You need to be root to run this command...\n"
    exit 1
fi

# common vars
W0CHP_INSTALL_SCRIPT_REPO="https://repo.w0chp.net/Chipster/W0CHP-PiStar-Install/raw/master/W0CHP-pistar"
W0CHP_DASH_REPO="https://repo.w0chp.net/Chipster/W0CHP-PiStar-Dash.git"
W0CHP_SBIN_REPO="https://repo.w0chp.net/Chipster/W0CHP-PiStar-sbin.git"
W0CHP_CUST_BINS_REPO="https://repo.w0chp.net/Chipster/W0CHP-PiStar-Dash_CustomBinaries.git"
OFFICIAL_DASH_REPO="https://github.com/AndyTaylorTweet/Pi-Star_DV_Dash.git"
OFFICIAL_SBIN_REPO="https://github.com/AndyTaylorTweet/Pi-Star_Binaries_sbin.git"
OFFICIAL_BIN_REPO="https://github.com/AndyTaylorTweet/Pi-Star_v4_Binaries_Bin.git"
REQD_PACKS_REPO="https://repo.w0chp.net/Chipster/W0CHP-PiStar-Install/raw/master/reqd-packs"
SUPPORTING_FILES_REPO="https://repo.w0chp.net/Chipster/W0CHP-PiStar-Install/raw/master/supporting-files"
PS_SERVICES_SCRIPT="https://repo.w0chp.net/Chipster/W0CHP-PiStar-sbin/raw/master/pistar-services"
# don't fuck with this unless you're brave and adept at troubleshooting
if [ -z ${W0CHP_DASH_BRANCH} ]; then
    W0CHP_DASH_BRANCH="master"
fi
# internal vars. no need to fuck with these
UPDATE_SELF=${UPDATE_SELF:-1}
UPDATE_URI="${W0CHP_INSTALL_SCRIPT_REPO}"
ROOT_PATH=${ROOT_PATH:-"/"}
WORK_PATH=${WORK_PATH:-"${ROOT_PATH}/root"}
SELFUPDATE_SCRIPT="${WORK_PATH}/.updateScript-W0CHP-pistar.sh"
CURL_OPTIONS=${CURL_OPTIONS:-""}
SUPPORTED_MAJOR="4"
ALL_ARGS="$@"
installedDashBranch=$(git --work-tree=/var/www/dashboard --git-dir=/var/www/dashboard/.git branch | grep '*' | cut -f2 -d ' ')
W0CHP_BINS="/usr/local/.W0CHP_bin"
# Credit for the colored status indicators
# goes to the awesome Pi-Hole devs. Love 'em!
COL_NC='\e[0m' # No Color
COL_LIGHT_GREEN='\e[1;32m'
COL_LIGHT_RED='\e[1;31m'
TICK="[${COL_LIGHT_GREEN}✓${COL_NC}]"
CROSS="[${COL_LIGHT_RED}✗${COL_NC}]"
INFO="[i]"
DONE="${COL_LIGHT_GREEN}Done!${COL_NC}"
OVER="\\r\\033[K"

# pi-star version check. only 4.x is supported.
RELEASE_FILE="/etc/pistar-release"
if [ -f ${RELEASE_FILE} ]; then
    PISTAR_VERSION=$(grep 'Version' /etc/pistar-release | cut -f 2 -d '=' | tr -d ' ')
    PISTAR_VERSION_INFO=( ${PISTAR_VERSION//./ })
    if [[ ${PISTAR_VERSION_INFO[0]} -ne ${SUPPORTED_MAJOR} ]]; then
        echo -e "${CROSS} ${COL_LIGHT_RED}ERROR:${COL_NC} Only Pi-Star 4.x.x is supported."
        exit 1
    fi
    if [[ ${UPDATE_SELF} -eq 0 ]]; then
        echo -e "${INFO} Detected Pi-Star version: $PISTAR_VERSION (major: ${PISTAR_VERSION_INFO[0]})"
    fi
else
    echo -e "${CROSS} ${COL_LIGHT_RED}ERROR:${COL_NC} You're not running a Pi-Star."
    exit 1
fi

# check if already running W0CHP and set result in var.
if grep -q W0CHP /var/www/dashboard/config/version.php ; then
    RUNNING_W0CHP=1
fi

function CheckPausedMode() {
    # check if user havs paused modes:
    if compgen -G "/etc/*_paused*" > /dev/null ; then
        echo -e "${CROSS} ${COL_LIGHT_RED}ERROR:${COL_NC} Paused mode(s) deteced..."
        echo -e "    You must unpause your mode(s) in Instant Mode Manager before proceeding."
        exit 1
    fi
}

function RemovePlatDet() {
    if [ -f /usr/local/bin/platformDetect.sh ]; then # remove platformDetect.sh since we have a custom version in /usr/local/sbin
        rm -f /usr/local/bin/platformDetect.sh
    fi
}

# check if user already has firewall disabled, and if so, ensure it's kept that way.
if ! grep -q LOGNDROP /etc/iptables.rules ; then
    FW_DISABLED=1
fi

# Always follow redirects
CURL_OPTIONS="${CURL_OPTIONS} -L"

function _rw() {
    # Prevent the FS to be remounted as RO
    systemctl stop cron.service > /dev/null 2<&1
    mount -o remount,rw /
}

function _ro() {
    sync
    mount -o remount,ro /
    systemctl start cron.service > /dev/null 2<&1
}

function WaitForUnattendedUpgrade() {
    /usr/bin/systemd-run --property="After=apt-daily.service apt-daily-upgrade.service" --wait /bin/true > /dev/null 2<&1
}

function CheckFWstate () {
    #SCRIPT_PATH=`dirname $SCRIPT_SELF`
    if [[ $FW_DISABLED  -eq "1" ]] ; then
        DisableFirewall
    fi
}

# $1 directory
# $2 repo
function ChangeAndCheckoutRepo() {
    dir="$1"
    repo="$2"
    echo -e "${INFO} Retrieving the files from the respective git repositories..."
    echo -e "    * Git repo: ${repo}"
    echo -e "    * Installing into: \"${dir}\""
    cd "$1"
    cp -a  /var/www/dashboard/config/{config.php,ircddblocal.php,language.php} /tmp/ # save user config files.
    git reset --hard > /dev/null # need this for initial install, since two php config files are over-written when user applies config
    git remote add newrepo "$repo" > /dev/null
    GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-Installer" git fetch -q newrepo > /dev/null
    git remote remove origin > /dev/null
    git remote rename newrepo origin > /dev/null
    if [[ $dir == "/var/www/dashboard" ]] && [[ ${key} =~ ^(-id|-idc|--install-dashboard|--install-dashboard-css)$ ]]; then # do (specified) branch checkout on dashboard, AND, that it's an install, not a restore...
        git checkout -q "$W0CHP_DASH_BRANCH" > /dev/null
        git reset --hard origin/"$W0CHP_DASH_BRANCH" > /dev/null
        mv /tmp/{config.php,ircddblocal.php,language.php} /var/www/dashboard/config/ # move back the user config files
        git stash > /dev/null 2<&1 # stash user config files in local repo
        git checkout stash@{0} -- config/config.php config/ircddblocal.php > /dev/null 2<&1 #restore config  from stash
        git stash clear > /dev/null 2<&1 # housekeeping
        # cache W0CHP-PiStar-Dash git version:
        ver_cmd=$( git --work-tree=/usr/local/sbin --git-dir=/usr/local/sbin/.git rev-parse HEAD | tail -1 | awk '{ print substr($1,1,10) }' ) # last pipe to awk: converts long hash to 10 chars.
        gitRemoteURL=$(git --work-tree=${dir} --git-dir=${dir}/.git config --get remote.origin.url)
        gitBranch="$( git --git-dir=${dir}/.git branch | grep '*' | awk {'print $2'} )"
        gitStatusRemote=$(env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="W0CHP-Update_Check Version Cacher (PS-CD) Ver.#${ver_cmd}" git ls-remote --heads ${gitRemoteURL} ${dashBranch} | grep ${gitBranch} | awk {'print $1'} | awk '{ print substr($1,1,10) }') # last pipe to awk: converts long hash to 10 chars.
        echo ${gitStatusRemote} > /etc/.W0CHP-PiStar-Dash.remote_version
    else # official pistar restore
        git reset --hard origin/master > /dev/null
        mv /tmp/{config.php,ircddblocal.php,language.php} /var/www/dashboard/config/ # move back the user config files
        git stash > /dev/null 2<&1 # stash user config files in local repo
        git checkout stash@{0} -- config/config.php config/ircddblocal.php config/language.php > /dev/null 2<&1 #restore config  from stash
        git stash clear > /dev/null 2<&1 # housekeeping
    fi
    echo -e "${TICK} ${DONE}\n"
}

function InstallDashboard() {
    WaitForUnattendedUpgrade
    curl -s ${CURL_OPTIONS} $PS_SERVICES_SCRIPT -o /tmp/pistar-services --user-agent "WPSD-Installer"
    chmod +x /tmp/pistar-services
    echo -e ""
    echo -e "${INFO} Stopping all Pi-Star Services. Please wait..."
    env REMOUNT_RO="NO" /tmp/pistar-services fullstop > /dev/null 2<&1
    sleep 1
    echo -e "${TICK} ${DONE}\n"
    echo -e "${INFO} Checking for required program(s)..."
    FuckOffMS
    if ! [ -x "$(command -v jq)" ]; then
        echo -e "\n${INFO} The 'jq' package was not found. Installing prerequsite, 'jq' and its"
        echo -e "    associated libraries from the official Raspberry Pi OS Repository,"
        echo -e "    which helps to mass-manage your static Brandmeister Talkgroups."
	echo -e "    This will take some time..."
	apt-get update > /dev/null
        apt-get install -y jq > /dev/null
        echo -e "${TICK} ${DONE}\n"
    else
        echo -e "${TICK} The required 'jq' package was already found! NOT intalling.\n"
    fi

    ChangeAndCheckoutRepo "/var/www/dashboard" "$W0CHP_DASH_REPO"
    ChangeAndCheckoutRepo "/usr/local/sbin" "$W0CHP_SBIN_REPO"
    ChangeAndCheckoutRepo "/usr/local/bin" "$OFFICIAL_BIN_REPO" # need to mke certain they have latest official binaries
 
    if [[ ${W0CHP_DASH_BRANCH} = DG-ID_M17 ]] ; then
        echo -e "${INFO} DG-ID and M17 support require custom-compiled MMDVMHost,"
        echo -e "    M17Gateway, RemoteCommand and YSFClient binaries..."
        echo -e "    Retrieving and installing them now."
	echo -e "    This will take some time..."
        GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-Installer" git clone -q ${W0CHP_CUST_BINS_REPO} ${W0CHP_BINS} > /dev/null
        cp -a ${W0CHP_BINS}/{YSFGateway,YSFParrot,DGIdGateway,M17Gateway,MMDVMHost,MMDVMCal,RemoteCommand} /usr/local/bin/
        cd /usr/local/bin/
        chmod root:bin * > /dev/null 2<&1
        git stash > /dev/null 2<&1 # stash custom bins
        git checkout stash@{0} -- YSFGateway YSFParrot DGIdGateway M17Gateway MMDVMHost MMDVMCal RemoteCommand > /dev/null 2<&1
        echo -e "${TICK} ${DONE}\n"
    fi
    # check for mobilegps else install skel if not exist...
    if [ ! -f "/etc/mobilegps" ]; then
        curl -s ${CURL_OPTIONS} $SUPPORTING_FILES_REPO/mobilegps -o /etc/mobilegps --user-agent "WPSD-Installer"
        chown -R www-data:www-data /etc/mobilegps
    fi
    chown -R www-data:www-data /var/www/dashboard
    echo -e "${INFO} Updating Hostfiles, User ID DB's and DMR Talkgroup Lists."
    echo -e "    This will take some time..."
    /bin/bash /usr/local/sbin/HostFilesUpdate.sh  > /dev/null 2<&1
    echo -e "${TICK} ${DONE}\n"
    echo -e "${INFO} Restarting all Pi-Star Services. Please wait..."
    env REMOUNT_RO="NO" /tmp/pistar-services start > /dev/null 2<&1
    echo -e "${TICK} ${DONE}\n"
    rm /tmp/pistar-services
    /usr/local/sbin/pistar-motdgen
    echo -e "${TICK} ${COL_LIGHT_GREEN}W0CHP-PiStar-Dash Installation Complete!${COL_NC}\n" 
}

function InstallCSS() {
    WaitForUnattendedUpgrade
    # Are we already running W0CHP Dash with user CSS? If so, leave all CSS alone...
    if [[ $RUNNING_W0CHP ]] && [ -f "/etc/pistar-css.ini" ]; then
        echo -e "\n${INFO} NOTE: Installation of CSS requested; however, W0CHP-PiStar-Dash"
        echo -e "    installation and custom CSS detected... Leaving CSS alone."
    # check for user's css (if any, back it up, and install W0CHP version)
    elif [ -f "/etc/pistar-css.ini" ]; then
        mv /etc/pistar-css.ini /etc/.pistar-css.ini.user
        curl -s ${CURL_OPTIONS} $SUPPORTING_FILES_REPO/pistar-css-W0CHP.ini -o /etc/pistar-css.ini --user-agent "WPSD-Installer"
    # otherwise, simply install W0CHP css
    else
        curl -s ${CURL_OPTIONS} $SUPPORTING_FILES_REPO/pistar-css-W0CHP.ini -o /etc/pistar-css.ini --user-agent "WPSD-Installer"
    fi
}

function MapCSS() {
    WaitForUnattendedUpgrade
    # ensure no user W0CHP css exists and install stock color mapping to new selectors
    if [[ ! $RUNNING_W0CHP ]] && [ ! -f "/etc/pistar-css.ini" ]; then
        #curl -s ${CURL_OPTIONS} $SUPPORTING_FILES_REPO/pistar-css-dist.ini -o /etc/pistar-css.ini --user-agent "WPSD-Installer"
        echo "" > /dev/null
    # are we running W0CHP with user css? if so, bail
    elif [[ $RUNNING_W0CHP ]] && [ -f "/etc/pistar-css.ini" ]; then
        echo -e "\n${INFO} NOTE: W0CHP-PiStar-Dash installation and custom CSS detected."
        echo -e "    Not mapping stock CSS. Leaving custom CSS alone."
    # otherwise, not running W0CHP dash, but user has css: make a backup of user's css and map stock css
    elif [[ ! $RUNNING_W0CHP ]] && [ -f "/etc/pistar-css.ini" ]; then
        mv /etc/pistar-css.ini /etc/.pistar-css.ini.user
        #curl -s ${CURL_OPTIONS} $SUPPORTING_FILES_REPO/pistar-css-dist.ini -o /etc/pistar-css.ini --user-agent "WPSD-Installer"
        echo -e "\n${INFO} ${COL_LIGHT_RED}NOTE: Custom CSS detected. Making backup and${COL_NC}"
        echo -e "    ${COL_LIGHT_RED}mapping stock Pi-Star colors. To re-map/re-customize${COL_NC}"
        echo -e "    ${COL_LIGHT_RED}your CSS manually, please see:${COL_NC}"
        echo -e "    ${COL_LIGHT_RED}<https://w0chp.net/w0chp-pistar-dash/#notes-about-css-and-custom-css-you-may-have-previously-applied>${COL_NC}"
    fi
}

function RestoreDashboard() {
    if [ -f "/usr/local/sbin/pistar-services" ] ; then
        cp -a /usr/local/sbin/pistar-services /tmp/
        echo -e "${INFO} Stopping all Pi-Star Services. Please wait..."
        env REMOUNT_RO="NO" /tmp/pistar-services fullstop > /dev/null 2<&1
        sleep 1
        echo -e "${TICK} ${DONE}"
        echo -e ""
    fi
    WaitForUnattendedUpgrade
    if [ -f "/etc/pistar-css.ini" ]; then
	    rm -f /etc/pistar-css.ini
    fi
    ChangeAndCheckoutRepo "/var/www/dashboard" "$OFFICIAL_DASH_REPO"
    ChangeAndCheckoutRepo "/usr/local/sbin" "$OFFICIAL_SBIN_REPO"
    ChangeAndCheckoutRepo "/usr/local/bin" "$OFFICIAL_BIN_REPO"
    # clean up the rest
    echo -e "${INFO} Cleaning up stray W0CHP-PiStar-Dash Files..."
    if compgen -G "/usr/local/etc/BM_TGs.json*" > /dev/null; then
        rm -r /usr/local/etc/BM_TGs.json*
    fi
    if compgen -G "/var/www/dashboard/.bm_tgs.json*" > /dev/null; then
        rm -r /var/www/dashboard/.bm_tgs.json*
    fi
    if compgen -G "/usr/local/etc/tgif-talkgroups*" > /dev/null; then
        rm -r /usr/local/etc/tgif-talkgroups*
    fi
    if compgen -G "/etc/.GETNAMES*" > /dev/null; then
        rm -r /etc/.GETNAMES*
    fi
    if compgen -G "/etc/.W0CHP-PiStar-Dash.remote_version*" > /dev/null; then
        rm -r /etc/.W0CHP-PiStar-Dash.remote_version*
    fi
    if compgen -G "/usr/local/etc/user.csv*" > /dev/null; then
        rm -r /usr/local/etc/user.csv*
    fi
    if compgen -G "/usr/local/etc/stripped.csv*" > /dev/null; then
        rm -r /usr/local/etc/stripped.csv*
    fi
    if compgen -G "/usr/local/etc/groups.txt*" > /dev/null; then
        rm -r //usr/local/etc/groups.txt*
    fi
    if [[ -d ${W0CHP_BINS} ]] ; then
        rm -rf ${W0CHP_BINS}
    fi
    echo -e "${TICK} ${DONE}\n"
    echo -e "${INFO} Removing packages installed for W0CHP-PiStar-Dash which"
    echo -e "    are no longer required.\n    This will take some time..."
    if  [ -x "$(command -v jq)" ]; then
        apt-get purge -y jq > /dev/null
        apt-get autoremove -y > /dev/null
        echo -e "${TICK} ${DONE}"
    else
        echo -e "${TICK} Non-required packages already removed."
    fi
    # re-init stock Pi-Star FW:
    echo -e "\n${INFO} Reinitializing Pi-Star firewall..."
    /usr/local/sbin/pistar-firewall > /dev/null 2<&1;
    echo -e "${TICK} ${DONE}\n"
    # Put platformDetect.sh and orig/official bins back..
    cd /usr/local/bin
    git stash clear > /dev/null 2<&1 # housekeeping
    git --work-tree=/usr/local/bin --git-dir=/usr/local/bin/.git reset --hard > /dev/null
    if [ -f "/tmp/pistar-services" ] ; then
        echo -e "${INFO} Restarting all Pi-Star Services. Please wait..."
        env REMOUNT_RO="NO" /tmp/pistar-services start > /dev/null 2<&1
        echo -e "${TICK} ${DONE}\n"
        rm /tmp/pistar-services
    fi
    # orig motd:
    /usr/local/sbin/pistar-motdgen
    echo -e "${TICK} ${COL_LIGHT_GREEN}Official Pi-Star Dashboard and files restoration complete!${COL_NC}\n"
}

function FuckOffMS()
{
    ## Remove damn Microsoft repo
    if [ -f /etc/apt/sources.list.d/vscode.list ]; then
        rm -r /etc/apt/sources.list.d/vscode.list
        apt-get update > /dev/null
    fi
    if [ -f /etc/apt/sources.list.d/.vscode.disabled ]; then
        rm -r /etc/apt/sources.list.d/.vscode.disabled
    fi
}

function UpdateSelf() {
    _rw
    echo -e "${INFO} Performing self-update..."
    local _tempFileName="$0.tmp"

    if ! eval curl -s ${CURL_OPTIONS} --output "${_tempFileName}" "${UPDATE_URI}"; then
        echo -e "${CROSS} ${COL_LIGHT_RED}ERROR:${COL_NC} Failed to download update for installation script!"
        echo -e "Make sure you have 'ca-certificates' installed and that the time is set correctly"
        exit 1
    fi
    
    if [[ "$(head -1 ${_tempFileName})" != '#!/usr/bin/env bash' ]]; then
        echo -e "${CROSS} ${COL_LIGHT_RED}ERROR:${COL_NC} Failed to download update for installation script!"
        echo -e "Contents of file is not as expected - repo may be down"
        exit 1
    fi
    
    local OCTAL_MODE=$(stat -c '%a' "$0")
    if ! chmod ${OCTAL_MODE} "${_tempFileName}" ; then
        echo -e "${CROSS} ${COL_LIGHT_RED}ERROR:${COL_NC} Error while trying to set mode on ${_tempFileName}"
        exit 1
    fi
    
    cat > "${SELFUPDATE_SCRIPT}" << EOF
        if ! grep -q LOGNDROP /etc/iptables.rules ; then
    	    FW_DISABLED=1
        fi
      	mount -o remount,rw /
    	mount -o remount,rw /boot
        if mv "${_tempFileName}" "$0"; then
           rm -- "\$0"
           #if [[ $FW_DISABLED -eq "1" ]] ; then
           #    exec env UPDATE_SELF=0 /usr/bin/env bash "$0" "$ALL_ARGS" "-dfw"
           #else
               exec env UPDATE_SELF=0 /usr/bin/env bash "$0" "$ALL_ARGS"
           #fi
        else
           echo "ERROR: Failed!"
        fi
       	mount -o remount,ro /
        mount -o remount,ro /boot
EOF

    echo -e "${INFO} Relaunching after update..."
    exec /usr/bin/env bash "${SELFUPDATE_SCRIPT}"
    _ro
}

function DisplayConfigUpdate() {
    echo -e "${COL_LIGHT_RED} ************************ NOTICE *************************"
    echo -e " *                                                       *"
    echo -e " *  Now you MUST open the Pi-Star's Configuration page   *"
    echo -e " *        and click the \"Apply Changes\" button!          *"
    echo -e " *                                                       *"
    echo -e " *********************************************************"
    echo -e "${COL_NC}"
}

function DisableFirewall() {
    if [[ $RUNNING_W0CHP ]]; then
        rm /usr/local/sbin/pistar-firewall
        ln -s /usr/local/sbin/pistar-firewall.disabled /usr/local/sbin/pistar-firewall
        bash /usr/local/sbin/pistar-firewall > /dev/null 2<&1
        echo -e "\n${TICK} Firewall Disabled\n"
    else
        echo -e "${CROSS} ${COL_LIGHT_RED}ERROR:${COL_NC} You must perform the full W0CHP-PiStar-Dash installation before disabling the firewall!"
        exit 1
    fi
}

function EnableFirewall() {
    if [[ $RUNNING_W0CHP ]]; then
        rm /usr/local/sbin/pistar-firewall
        ln -s /usr/local/sbin/pistar-firewall.enabled /usr/local/sbin/pistar-firewall
        bash /usr/local/sbin/pistar-firewall > /dev/null 2<&1
        echo -e "\n${TICK} Firewall Enabled\n"
    else
        echo -e "${CROSS} ${COL_LIGHT_RED}ERROR:${COL_NC} You must perform the full W0CHP-PiStar-Dash installation before (re-)enabling the firewall!"
        exit 1
    fi
}

# $1 directory
# $2 original repo
function DisplayRepoStatus() {
    dir="$1"
    repo=$(git --work-tree=${dir} --git-dir=${dir}/.git config --get remote.origin.url)
    if [ "$repo" == "$2" ]; then
        echo -e "'$1':\t uses *OFFICIAL* Pi-Star Repository"
    else
        branch=$(git --work-tree=${dir} --git-dir=${dir}/.git branch | grep '*' | cut -f2 -d ' ')
        ver_cmd=$( git --work-tree=${dir} --git-dir=${dir}/.git rev-parse HEAD | tail -1 | awk '{ print substr($1,1,10) }' ) # last pipe to awk: converts long hash to 10 chars.
        echo -e "'$1':\t uses *W0CHP* Repository, on the '$branch' branch; Version # $ver_cmd"
    fi
}

function DisplayStatus() {
    DisplayRepoStatus "/var/www/dashboard" "$OFFICIAL_DASH_REPO"
    DisplayRepoStatus "/usr/local/sbin" "$OFFICIAL_SBIN_REPO"
}

function DisplayHelp() {
    echo "`basename $0` usage:"
    echo ""
    echo "  -h,   --help                     Display this help text."
    echo "  -id,  --install-dashboard        Install W0CHP dashboard."
    echo "  -idc  --install-dashboard-css    Install W0CHP dashboard WITH custom stylesheet."
    echo "  -rd,  --restore-dashboard        Restore original dashboard."
    echo "  -dfw  --disable-firewall         Disable Pi-Star firewall rules and allow all traffic"
    echo "  -efw  --enable-firewall          Enable Pi-Star firewall rules to defaults and only allow required traffic"
    echo "  -s,   --status                   Display current install, original or W0CHP installations."
    echo ""
}


if [ $# -eq 0 ]; then
    DisplayHelp
    exit 1
fi

if [ -z "$NO_SELF_UPDATE" -a x"$NO_UPDATE_SELF" != "x1" ]; then
    if [[ ${UPDATE_SELF} -ne 0 ]]; then
        UpdateSelf
    else
        rm -f "${SELFUPDATE_SCRIPT}"
    fi
fi

## Parse command line
while [[ $# -gt 0 ]]; do
    key="$1"

    case $key in
	"-id" | "--install-dashboard")
            clear
            CheckPausedMode
	    echo -e "\n${INFO} Installing the W0CHP-PiStar-Dash software.\n    This will take some time..."
            _rw
	    MapCSS
	    InstallDashboard
            CheckFWstate
            RemovePlatDet
	    DisplayConfigUpdate
            _ro
	    shift
	    ;;

	"-idc" | "--install-dashboard-css")
            clear
            CheckPausedMode
	    echo -e "\n${INFO} Installing the W0CHP-PiStar-Dash software with custom stylesheet.\n    This will take some time..."
            _rw
	    InstallCSS
	    InstallDashboard
            CheckFWstate
	    RemovePlatDet
	    DisplayConfigUpdate
            _ro
	    shift
	    ;;

	"-rd" | "--restore-dashboard")
            clear
            CheckPausedMode
	    echo -e "\n${INFO} Restoring the original Pi-Star dashboard and files.\n    This will take some time...\n"
            _rw
	    RestoreDashboard
	    DisplayConfigUpdate
            _ro
	    shift
	    ;;

	"-dfw" | "--disable-firewall")
            _rw
	    DisableFirewall
            _ro
	    shift
	    ;;

	"-efw" | "--enable-firewall")
            _rw
	    EnableFirewall
            _ro
	    shift
	    ;;

	"-s" | "--status")
	    DisplayStatus
	    shift
	    ;;

	"-h" | "--help")
	    DisplayHelp
	    shift
	    ;;

	*)
	    DisplayHelp;
	    exit 1
	    ;;
    esac
done

exit 0

