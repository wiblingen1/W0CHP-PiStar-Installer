#!/usr/bin/env bash

# ############################## NOTE ################################ #
#                                                                      #
# NO_UPDATE_SELF=1 will disable auto update of this script             #
#                                                                      #
# INSTALL_BETA=1 will install the unstable version.                    # 
#                                                                      #
# #################################################################### #

if [ "$(id -u)" != "0" ]; then
  echo -e "You need to be root to run this command...\n"
  exit 1
fi

W0CHP_INSTALL_SCRIPT_REPO="https://repo.w0chp.net/Chipster/W0CHP-PiStar-Install/raw/master/W0CHP-pistar"
W0CHP_DASH_REPO="https://repo.w0chp.net/Chipster/W0CHP-PiStar-Dash.git"
W0CHP_SBIN_REPO="https://repo.w0chp.net/Chipster/W0CHP-PiStar-sbin.git"
OFFICIAL_DASH_REPO="https://github.com/AndyTaylorTweet/Pi-Star_DV_Dash.git"
OFFICIAL_SBIN_REPO="https://github.com/AndyTaylorTweet/Pi-Star_Binaries_sbin.git"

W0CHP_BETA_BRANCH="TalkerAlias"

UPDATE_SELF=${UPDATE_SELF:-1}
UPDATE_URI="${W0CHP_INSTALL_SCRIPT_REPO}"
ROOT_PATH=${ROOT_PATH:-"/"}
WORK_PATH=${WORK_PATH:-"${ROOT_PATH}/root"}
SELFUPDATE_SCRIPT="${WORK_PATH}/.updateScript-W0CHP-pistar.sh"
CURL_OPTIONS=${CURL_OPTIONS:-""}
ALL_ARGS="$@"

RELEASE_FILE="/etc/pistar-release"

if [ -f ${RELEASE_FILE} ]; then
    PISTAR_VERSION=$(grep 'Version' /etc/pistar-release | cut -f 2 -d '=' | tr -d ' ')
    PISTAR_VERSION_INFO=( ${PISTAR_VERSION//./ })
    if [[ ${UPDATE_SELF} -eq 0 ]]; then
	echo "Detected Pi-Star version: $PISTAR_VERSION (major: ${PISTAR_VERSION_INFO[0]})"
    fi
else
    echo "ERROR: you're not running a PiStar."
    exit 1
fi

# check if already running W0CHP and set result in var.
if grep -q W0CHP /var/www/dashboard/config/version.php ; then
    RUNNING_W0CHP=1
fi

# Always follow redirects
CURL_OPTIONS="${CURL_OPTIONS} -L"

## Only pistar v4 supported!
if [ ! ${PISTAR_VERSION_INFO[0]} -eq 4 ]; then
    echo "Unsupported PiStar version."
    exit 1
fi

function _rw() {
    # Prevent the FS to be remounted as RO
    systemctl stop cron.service > /dev/null 2<&1
    mount -o remount,rw /
}

function _ro() {
    sync
    mount -o remount,ro /
    systemctl start cron.service > /dev/null 2<&1
}

function WaitForUnattendedUpgrade() {
    /usr/bin/systemd-run --property="After=apt-daily.service apt-daily-upgrade.service" --wait /bin/true > /dev/null 2<&1
}

# $1 directory
# $2 repository
function ChangeAndCheckoutRepo() {
    dir="$1"
    repo="$2"

    cd "$1"
    git remote add newrepo "$repo"
    git fetch newrepo
    git remote remove origin
    git remote rename newrepo origin
    if [[ ${INSTALL_BETA} = 1 ]] && [[ $dir == "/var/www/dashboard" ]] && [[ ${key} =~ ^(-id|-idn|--install-dashboard|--install-dashboard-nocss)$ ]]; then # check if user wants beta, AND, that it's an install, not a restore...
        git checkout "$W0CHP_BETA_BRANCH"
        git reset --hard origin/"$W0CHP_BETA_BRANCH"
    else
        git reset --hard origin/master
    fi
}

function InstallDashboard() {
    WaitForUnattendedUpgrade
    _rw
    echo -e "Checking for required program...\n"
    if ! [ -x "$(command -v jq)" ]; then
        echo -e "'jq' package not found. Installing prerequsite, 'jq' and it's\n"
	echo -e"associated libraries; which helps to mass-manage your static Brandmeister Talkgroups\n"
	echo -e "\nThis will take some time...\n"
        apt-get update
        apt-get install -y jq
    else
	echo -e "'jq' package found! Not intalling.\n"
    fi
    ChangeAndCheckoutRepo "/var/www/dashboard" "$W0CHP_DASH_REPO"
    ChangeAndCheckoutRepo "/usr/local/sbin" "$W0CHP_SBIN_REPO"
    chown -R www-data:www-data /var/www/dashboard
    echo -e "\nUpdating host files and BM TG names. This will take some time...\n"
        /bin/bash /usr/local/sbin/HostFilesUpdate.sh
    _ro
}

function InstallCSS() {
    WaitForUnattendedUpgrade
    _rw
    # Are we already running W0CHP Dash with user CSS? If so, leave all CSS alone...
    if [[ $RUNNING_W0CHP ]] && [ -f "/etc/pistar-css.ini" ]; then
        echo -e "\n\nInstallation of CSS requested, however, W0CHP Dash and custom CSS detected... Leaving CSS alone.\n\n"
    # check for user's css (if any, back it up, and install W0CHP version)
    elif [ -f "/etc/pistar-css.ini" ]; then
        mv /etc/pistar-css.ini /etc/.pistar-css.ini.user
        cp /var/www/dashboard/supporting-files/pistar-css-W0CHP.ini /etc/pistar-css.ini
    # otherwise, simply install W0CHP css
    else
        cp /var/www/dashboard/supporting-files/pistar-css-W0CHP.ini /etc/pistar-css.ini
    fi
    _ro
}

function MapCSS() {
    WaitForUnattendedUpgrade
    _rw
    # ensure no user W0CHP css exists and install stock color mapping to new selectors
    if [[ ! $RUNNING_W0CHP ]] && [ ! -f "/etc/pistar-css.ini" ]; then
        cp /var/www/dashboard/supporting-files/pistar-css-dist.ini /etc/pistar-css.ini
    # are we running W0CHP with user css? if so, bail
    elif [[ $RUNNING_W0CHP ]] && [ -f "/etc/pistar-css.ini" ]; then
        echo -e "\n\nW0CHP Dash and custom CSS detected... Not mapping stock CSS. Leaving custom  CSS alone.\n\n"
    # otherwise, not running W0CHP dash, but user has css: make a backup of user's css and map stock css
    elif [[ ! $RUNNING_W0CHP ]] && [ -f "/etc/pistar-css.ini" ]; then
        mv /etc/pistar-css.ini /etc/.pistar-css.ini.user
        cp /var/www/dashboard/supporting-files/pistar-css-dist.ini /etc/pistar-css.ini
        echo -e "\n\nCustom CSS detected. Making backup and mapping stock Pi-Star colors. To re-map/re-customize"
        echo -e "your CSS manually, please see the README: <https://repo.w0chp.net/Chipster/W0CHP-PiStar-Dash#file-content>\n\n"
    fi
    _ro
}

function RestoreDashboard() {
    echo -e "\nRestoring official Pi-Star Dashboard and files...\n"
    WaitForUnattendedUpgrade
    _rw
    # remove W0CHP css if any and restore user css (if any)
    if [ -f "/etc/.pistar-css.ini.user" ]; then
        rm -f /etc/pistar-css.ini
	mv /etc/.pistar-css.ini.user /etc/pistar-css.ini
    # otherwise, remove straggler and really go back to stock
    elif [ -f "/etc/pistar-css.ini" ]; then
	    rm -f /etc/pistar-css.ini
    fi
    ChangeAndCheckoutRepo "/var/www/dashboard" "$OFFICIAL_DASH_REPO"
    ChangeAndCheckoutRepo "/usr/local/sbin" "$OFFICIAL_SBIN_REPO"
    # clean up the rest
    if compgen -G "/usr/local/etc/BM_TGs.json*" > /dev/null; then
        rm -r /usr/local/etc/BM_TGs.json*
    fi
    if compgen -G "/var/www/dashboard/.bm_tgs.json*" > /dev/null; then
        rm -r /var/www/dashboard/.bm_tgs.json*
    fi
    if  [ -x "$(command -v jq)" ]; then
        apt-get remove -y jq
        apt-get autoremove -y
    fi
    _ro
    echo -e "\nOfficial Pi-Star Dashboard and files restoration complete.\n"
}

function UpdateSelf() {
    echo "Performing self-update..."
    local _tempFileName="$0.tmp"
    _rw

    if ! eval curl -s ${CURL_OPTIONS} --output "${_tempFileName}" "${UPDATE_URI}"; then
        echo "ERROR: Failed to download update for installation script!"
        echo "ERROR: Make sure you have ca-certificates installed and that the time is set correctly"
	_ro
        exit 1
    fi
    
    if [[ "$(head -1 ${_tempFileName})" != '#!/usr/bin/env bash' ]]; then
        echo "ERROR: Failed to download update for installation script!"
        echo "ERROR: Contents of file is not as expected - github may be down"
	_ro
        exit 1
    fi
    
    local OCTAL_MODE=$(stat -c '%a' "$0")
    if ! chmod ${OCTAL_MODE} "${_tempFileName}" ; then
        echo "ERROR: Error while trying to set mode on ${_tempFileName}"
	_ro
        exit 1
    fi
    
    cat > "${SELFUPDATE_SCRIPT}" << EOF
      	mount -o remount,rw /
    	mount -o remount,rw /boot
        if mv "${_tempFileName}" "$0"; then
           rm -- "\$0"
           exec env UPDATE_SELF=0 /usr/bin/env bash "$0" "$ALL_ARGS"
        else
           echo "ERROR: Failed!"
        fi
       	mount -o remount,ro /
        mount -o remount,ro /boot
EOF

    _ro
    echo "Relaunching after update"
    exec /usr/bin/env bash "${SELFUPDATE_SCRIPT}"
}

function DisplayConfigUpdate() {
    echo " ****************************************** NOTICE ********************************************"
    echo " *                                                                                            *"
    echo " * Now you need to open the Pi-Star's Configuration page, and click \"Apply Changes\" button    *"
    echo " *                                                                                            *"
    echo " **********************************************************************************************"
}

# $1 directory
# $2 original repo
function DisplayRepoStatus() {
    dir="$1"
    repo=$(git --work-tree=${dir} --git-dir=${dir}/.git config --get remote.origin.url)

    if [ "$repo" == "$2" ]; then
	echo "$1 uses *OFFICIAL* Pi-Star Repository."
    else
	echo "$1 uses *W0CHP* Repository."
    fi
}

function DisplayStatus() {
    DisplayRepoStatus "/var/www/dashboard" "$OFFICIAL_DASH_REPO"
    DisplayRepoStatus "/usr/local/sbin" "$OFFICIAL_SBIN_REPO"
}

function DisplayHelp() {
    echo "`basename $0` usage:"
    echo ""
    echo "  -h,   --help                     Display this help text."
    echo "  -id,  --install-dashboard        Install W0CHP dashboard."
    echo "  -idn  --install-dashboard-nocss  Install W0CHP dashboard WITHOUT stylesheet."
    echo "  -rd,  --restore-dashboard        Restore original dashboard."
    echo "  -s,   --status                   Display current install, original or W0CHP installations."
    echo ""
}


if [ $# -eq 0 ]; then
    DisplayHelp
    exit 1
fi

if [ -z "$NO_SELF_UPDATE" -a x"$NO_UPDATE_SELF" != "x1" ]; then
    if [[ ${UPDATE_SELF} -ne 0 ]]; then
        UpdateSelf
    else
        rm -f "${SELFUPDATE_SCRIPT}"
    fi
fi


## Parse command line
while [[ $# -gt 0 ]]; do
    key="$1"

    case $key in
	"-id" | "--install-dashboard")
	    echo -e "INFO: Installing the dashboard, this may take some time...\n\n"
	    InstallDashboard
	    InstallCSS
	    DisplayConfigUpdate
	    shift
	    ;;

	"-idn" | "--install-dashboard-nocss")
	    echo -e "INFO: Installing the dashboard, this may take some time...\n\n"
	    InstallDashboard
	    MapCSS
	    DisplayConfigUpdate
	    shift
	    ;;

	"-rd" | "--restore-dashboard")
	    RestoreDashboard
	    DisplayConfigUpdate
	    shift
	    ;;

	"-s" | "--status")
	    DisplayStatus
	    shift
	    ;;

	"-h" | "--help")
	    DisplayHelp
	    shift
	    ;;

	*)
	    DisplayHelp;
	    exit 1
	    ;;
    esac
done

exit 0

