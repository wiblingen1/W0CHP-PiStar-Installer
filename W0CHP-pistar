#!/usr/bin/env bash

# ############################## NOTE ################################ #
#                                                                      #
# NO_SELF_UPDATE=1 # will disable auto update of this script           #
#                                                                      #
# #################################################################### #

# privilege check
if [ "$(id -u)" != "0" ]; then
  echo -e "You need to be root to run this command...\n"
  exit 1
fi

# common vars
W0CHP_INSTALL_SCRIPT_REPO="https://repo.w0chp.net/Chipster/W0CHP-PiStar-Install/raw/master/W0CHP-pistar"
W0CHP_DASH_REPO="https://repo.w0chp.net/Chipster/W0CHP-PiStar-Dash.git"
W0CHP_SBIN_REPO="https://repo.w0chp.net/Chipster/W0CHP-PiStar-sbin.git"
OFFICIAL_DASH_REPO="https://github.com/AndyTaylorTweet/Pi-Star_DV_Dash.git"
OFFICIAL_SBIN_REPO="https://github.com/AndyTaylorTweet/Pi-Star_Binaries_sbin.git"
REQD_PACKS_REPO="https://repo.w0chp.net/Chipster/W0CHP-PiStar-Install/raw/master/reqd-packs"
SUPPORTING_FILES_REPO="https://repo.w0chp.net/Chipster/W0CHP-PiStar-Install/raw/master/supporting-files"
PS_SERVICES_SCRIPT="https://repo.w0chp.net/Chipster/W0CHP-PiStar-sbin/raw/master/pistar-services"

# don't fuck with this unless you're brave and adept at troubleshooting
W0CHP_DASH_BRANCH="master"

# internal vars. no need to fuck with these
UPDATE_SELF=${UPDATE_SELF:-1}
UPDATE_URI="${W0CHP_INSTALL_SCRIPT_REPO}"
ROOT_PATH=${ROOT_PATH:-"/"}
WORK_PATH=${WORK_PATH:-"${ROOT_PATH}/root"}
SELFUPDATE_SCRIPT="${WORK_PATH}/.updateScript-W0CHP-pistar.sh"
CURL_OPTIONS=${CURL_OPTIONS:-""}
ALL_ARGS="$@"
SUPPORTED_MAJOR="4"

# pi-star version check. only 4.x is supported.
RELEASE_FILE="/etc/pistar-release"
if [ -f ${RELEASE_FILE} ]; then
    PISTAR_VERSION=$(grep 'Version' /etc/pistar-release | cut -f 2 -d '=' | tr -d ' ')
    PISTAR_VERSION_INFO=( ${PISTAR_VERSION//./ })
    if [[ ${PISTAR_VERSION_INFO[0]} -ne ${SUPPORTED_MAJOR} ]]; then
        echo "ERROR: Only Pi-Star 4.x.x is supported."
        exit 1
    fi
    if [[ ${UPDATE_SELF} -eq 0 ]]; then
        echo "Detected Pi-Star version: $PISTAR_VERSION (major: ${PISTAR_VERSION_INFO[0]})"
    fi
else
    echo "ERROR: you're not running a PiStar."
    exit 1
fi

# check if already running W0CHP and set result in var.
if grep -q W0CHP /var/www/dashboard/config/version.php ; then
    RUNNING_W0CHP=1
fi

# check if user already has firewall disabled, and if so, ensure it's kept that way.
if ! grep -q LOGNDROP /etc/iptables.rules ; then
    FW_DISABLED=1
fi

# Always follow redirects
CURL_OPTIONS="${CURL_OPTIONS} -L"

function _rw() {
    # Prevent the FS to be remounted as RO
    systemctl stop cron.service > /dev/null 2<&1
    mount -o remount,rw /
}

function _ro() {
    sync
    mount -o remount,ro /
    systemctl start cron.service > /dev/null 2<&1
}

function WaitForUnattendedUpgrade() {
    /usr/bin/systemd-run --property="After=apt-daily.service apt-daily-upgrade.service" --wait /bin/true > /dev/null 2<&1
}

function CheckFWstate () {
    #SCRIPT_PATH=`dirname $SCRIPT_SELF`
    if [[ $FW_DISABLED  -eq "1" ]] ; then
        DisableFirewall
    fi
}

# $1 directory
# $2 repo
function ChangeAndCheckoutRepo() {
    dir="$1"
    repo="$2"

    cd "$1"
    cp -a  /var/www/dashboard/config/{config.php,ircddblocal.php,language.php} /tmp/ # save user config files.
    git reset --hard # need this for initial install, since two php config files are over-written when user applies config
    git remote add newrepo "$repo"
    GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-Installer" git fetch newrepo
    git remote remove origin
    git remote rename newrepo origin
    if [[ $dir == "/var/www/dashboard" ]] && [[ ${key} =~ ^(-id|-idc|--install-dashboard|--install-dashboard-css)$ ]]; then # do (specified) branch checkout on dashboard, AND, that it's an install, not a restore...
        git checkout "$W0CHP_DASH_BRANCH"
        git reset --hard origin/"$W0CHP_DASH_BRANCH"
        mv /tmp/{config.php,ircddblocal.php,language.php} /var/www/dashboard/config/ # move back the user config files
        git stash > /dev/null 2<&1 # stash user config files in local repo
        git checkout stash@{0} -- config/config.php config/ircddblocal.php > /dev/null 2<&1 #restore config  from stash
        git stash clear > /dev/null 2<&1 # housekeeping
        if [ -f /usr/local/bin/platformDetect.sh ]; then # remove platformDetect.sh since we have a custom version in /usr/local/sbin
            git --work-tree=/usr/local/bin --git-dir=/usr/local/bin/.git rm platformDetect.sh > /dev/null 2>&1
        fi
        # cache W0CHP-PiStar-Dash git version:
        ver_cmd=$( git --work-tree=/usr/local/sbin --git-dir=/usr/local/sbin/.git rev-parse HEAD | tail -1 | awk '{ print substr($1,1,10) }' ) # last pipe to awk: converts long hash to 10 chars.
        gitRemoteURL=$(git --work-tree=${dir} --git-dir=${dir}/.git config --get remote.origin.url)
        gitBranch="$( git --git-dir=${dir}/.git branch | grep '*' | awk {'print $2'} )"
        gitStatusRemote=$(env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="W0CHP-Update_Check Version Cacher (PS-CD) Ver.#${ver_cmd}" git ls-remote --heads ${gitRemoteURL} ${dashBranch} | grep ${gitBranch} | awk {'print $1'} | awk '{ print substr($1,1,10) }') # last pipe to awk: converts long hash to 10 chars.
        echo ${gitStatusRemote} > /etc/.W0CHP-PiStar-Dash.remote_version
    else # official pistar restore
        git reset --hard origin/master
        mv /tmp/{config.php,ircddblocal.php,language.php} /var/www/dashboard/config/ # move back the user config files
        git stash > /dev/null 2<&1 # stash user config files in local repo
        git checkout stash@{0} -- config/config.php config/ircddblocal.php config/language.php > /dev/null 2<&1 #restore config  from stash
        git stash clear > /dev/null 2<&1 # housekeeping
    fi
}

function InstallDashboard() {
    WaitForUnattendedUpgrade
    curl -s ${CURL_OPTIONS} $PS_SERVICES_SCRIPT -o /tmp/pistar-services --user-agent "WPSD-Installer"
    bash /tmp/pistar-services fullstop
    echo -e "Checking for required program(s)..."
    FuckOffMS
    if ! [ -x "$(command -v jq)" ]; then
        echo -e "\nThe 'jq' package was not found. Installing prerequsite, 'jq' and its"
	echo -e "associated libraries; which helps to mass-manage your static Brandmeister Talkgroups.\n"
	echo -e "\nThis will take some time...\n"
        #apt-get update
        apt-get install -y jq
    else
        echo -e "\nThe required 'jq' package was already found! NOT intalling.\n"
    fi

    ChangeAndCheckoutRepo "/var/www/dashboard" "$W0CHP_DASH_REPO"
    ChangeAndCheckoutRepo "/usr/local/sbin" "$W0CHP_SBIN_REPO"
    # check for mobilegps else install skel if not exist...
    if [ ! -f "/etc/mobilegps" ]; then
        curl -s ${CURL_OPTIONS} $SUPPORTING_FILES_REPO/mobilegps -o /etc/mobilegps --user-agent "WPSD-Installer"
        chown -R www-data:www-data /etc/mobilegps
    fi
    chown -R www-data:www-data /var/www/dashboard
    echo -e "\nUpdating Hostfiles, User ID DB's and DMR Talkgroup Lists.... This will take some time..."
    /bin/bash /usr/local/sbin/HostFilesUpdate.sh
    bash /tmp/pistar-services start
    rm /tmp/pistar-services
}

function InstallCSS() {
    WaitForUnattendedUpgrade
    # Are we already running W0CHP Dash with user CSS? If so, leave all CSS alone...
    if [[ $RUNNING_W0CHP ]] && [ -f "/etc/pistar-css.ini" ]; then
        echo -e "\n\nInstallation of CSS requested; however, W0CHP-PiStar Dash installation and custom CSS detected... Leaving CSS alone.\n\n"
    # check for user's css (if any, back it up, and install W0CHP version)
    elif [ -f "/etc/pistar-css.ini" ]; then
        mv /etc/pistar-css.ini /etc/.pistar-css.ini.user
        curl -s ${CURL_OPTIONS} $SUPPORTING_FILES_REPO/pistar-css-W0CHP.ini -o /etc/pistar-css.ini --user-agent "WPSD-Installer"
    # otherwise, simply install W0CHP css
    else
        curl -s ${CURL_OPTIONS} $SUPPORTING_FILES_REPO/pistar-css-W0CHP.ini -o /etc/pistar-css.ini --user-agent "WPSD-Installer"
    fi
}

function MapCSS() {
    WaitForUnattendedUpgrade
    # ensure no user W0CHP css exists and install stock color mapping to new selectors
    if [[ ! $RUNNING_W0CHP ]] && [ ! -f "/etc/pistar-css.ini" ]; then
        curl -s ${CURL_OPTIONS} $SUPPORTING_FILES_REPO/pistar-css-dist.ini -o /etc/pistar-css.ini --user-agent "WPSD-Installer"
    # are we running W0CHP with user css? if so, bail
    elif [[ $RUNNING_W0CHP ]] && [ -f "/etc/pistar-css.ini" ]; then
        echo -e "\n\nW0CHP-PiStar-Dash installation and custom CSS detected... Not mapping stock CSS. Leaving custom  CSS alone.\n\n"
    # otherwise, not running W0CHP dash, but user has css: make a backup of user's css and map stock css
    elif [[ ! $RUNNING_W0CHP ]] && [ -f "/etc/pistar-css.ini" ]; then
        mv /etc/pistar-css.ini /etc/.pistar-css.ini.user
        curl -s ${CURL_OPTIONS} $SUPPORTING_FILES_REPO/pistar-css-dist.ini -o /etc/pistar-css.ini --user-agent "WPSD-Installer"
        echo -e "\n\nCustom CSS detected. Making backup and mapping stock Pi-Star colors. To re-map/re-customize"
        echo -e "your CSS manually, please see <https://w0chp.net/w0chp-pistar-dash/#notes-about-css-and-custom-css-you-may-have-previously-applied>\n\n"
    fi
}

function RestoreDashboard() {
    echo -e "\nRestoring official Pi-Star Dashboard and files...\n"
    if [ -f "/usr/local/sbin/pistar-services" ] ; then
        cp /usr/local/sbin/pistar-services /tmp/
        bash /tmp/pistar-services fullstop
    fi
    WaitForUnattendedUpgrade
    if [ -f "/etc/pistar-css.ini" ]; then
	    rm -f /etc/pistar-css.ini
    fi
    ChangeAndCheckoutRepo "/var/www/dashboard" "$OFFICIAL_DASH_REPO"
    ChangeAndCheckoutRepo "/usr/local/sbin" "$OFFICIAL_SBIN_REPO"
    # clean up the rest
    if compgen -G "/usr/local/etc/BM_TGs.json*" > /dev/null; then
        rm -r /usr/local/etc/BM_TGs.json*
    fi
    if compgen -G "/var/www/dashboard/.bm_tgs.json*" > /dev/null; then
        rm -r /var/www/dashboard/.bm_tgs.json*
    fi
    if compgen -G "/usr/local/etc/tgif-talkgroups*" > /dev/null; then
        rm -r /usr/local/etc/tgif-talkgroups*
    fi
    if compgen -G "/etc/.GETNAMES*" > /dev/null; then
        rm -r /etc/.GETNAMES*
    fi
    if compgen -G "/etc/.W0CHP-PiStar-Dash.remote_version*" > /dev/null; then
        rm -r /etc/.W0CHP-PiStar-Dash.remote_version*
    fi
    echo -e "\nRemoving packages installed for W0CHP-PiStar-Dash...\n"
    if  [ -x "$(command -v jq)" ]; then
        apt-get purge -y jq
        apt-get autoremove -y
    fi
    if php -m | grep -q dom; then
	    if php -v | grep -q '7.3' ; then
	        apt-get purge -y php7.3-xml
        else
	        apt-get purge -y php7.0-xml
        fi
        apt-get autoremove -y
    fi
    EnableShittyMS
    # re-init stock Pi-Star FW:
    /usr/local/sbin/pistar-firewall > /dev/null 2<&1;
    echo -e "\nOfficial Pi-Star Dashboard and files restoration complete.\n"
    # Put platformDetect.sh back..
    git --work-tree=/usr/local/bin --git-dir=/usr/local/bin/.git reset --hard > /dev/null 2>&1
    if [ -f "/tmp//pistar-services" ] ; then
        bash /tmp/pistar-services start
        rm /tmp/pistar-services
    fi
}

function FuckOffMS()
{
    ## Remove damn Microsoft repo
    if [ -e /etc/apt/sources.list.d/vscode.list ]; then
        mv /etc/apt/sources.list.d/vscode.list /etc/apt/sources.list.d/.vscode.disabled
        apt-get update
    fi
}

function EnableShittyMS()
{
    ## Remove damn Microsoft repo
    if [ -e /etc/apt/sources.list.d/.vscode.disabled ]; then
        mv /etc/apt/sources.list.d/.vscode.disabled /etc/apt/sources.list.d/vscode.list
        apt-get update
    fi
}

function UpdateSelf() {
    _rw
    echo "Performing self-update..."
    local _tempFileName="$0.tmp"

    if ! eval curl -s ${CURL_OPTIONS} --output "${_tempFileName}" "${UPDATE_URI}"; then
        echo "ERROR: Failed to download update for installation script!"
        echo "ERROR: Make sure you have ca-certificates installed and that the time is set correctly"
        exit 1
    fi
    
    if [[ "$(head -1 ${_tempFileName})" != '#!/usr/bin/env bash' ]]; then
        echo "ERROR: Failed to download update for installation script!"
        echo "ERROR: Contents of file is not as expected - repo may be down"
        exit 1
    fi
    
    local OCTAL_MODE=$(stat -c '%a' "$0")
    if ! chmod ${OCTAL_MODE} "${_tempFileName}" ; then
        echo "ERROR: Error while trying to set mode on ${_tempFileName}"
        exit 1
    fi
    
    cat > "${SELFUPDATE_SCRIPT}" << EOF
        if ! grep -q LOGNDROP /etc/iptables.rules ; then
    	    FW_DISABLED=1
        fi
      	mount -o remount,rw /
    	mount -o remount,rw /boot
        if mv "${_tempFileName}" "$0"; then
           rm -- "\$0"
           #if [[ $FW_DISABLED -eq "1" ]] ; then
           #    exec env UPDATE_SELF=0 /usr/bin/env bash "$0" "$ALL_ARGS" "-dfw"
           #else
               exec env UPDATE_SELF=0 /usr/bin/env bash "$0" "$ALL_ARGS"
           #fi
        else
           echo "ERROR: Failed!"
        fi
       	mount -o remount,ro /
        mount -o remount,ro /boot
EOF

    echo "Relaunching after update..."
    exec /usr/bin/env bash "${SELFUPDATE_SCRIPT}"
    _ro
}

function DisplayConfigUpdate() {
    echo " ****************************************** NOTICE ********************************************"
    echo " *                                                                                            *"
    echo " * Now you need to open the Pi-Star's Configuration page, and click \"Apply Changes\" button    *"
    echo " *                                                                                            *"
    echo " **********************************************************************************************"
}

function DisableFirewall() {
    if [[ $RUNNING_W0CHP ]]; then
        rm /usr/local/sbin/pistar-firewall
        ln -s /usr/local/sbin/pistar-firewall.disabled /usr/local/sbin/pistar-firewall
        bash /usr/local/sbin/pistar-firewall > /dev/null 2<&1
        echo "Firewall Disabled"
    else
        echo "ERROR: You must perform the full W0CHP-PiStar-Dash installation before disabling the firewall!"
        exit 1
    fi
}

function EnableFirewall() {
    if [[ $RUNNING_W0CHP ]]; then
        rm /usr/local/sbin/pistar-firewall
        ln -s /usr/local/sbin/pistar-firewall.enabled /usr/local/sbin/pistar-firewall
        bash /usr/local/sbin/pistar-firewall > /dev/null 2<&1
        echo "Firewall Ensabled"
    else
        echo "ERROR: You must perform the full W0CHP-PiStar-Dash installation before (re-)enabling the firewall!"
        exit 1
    fi
}

# $1 directory
# $2 original repo
function DisplayRepoStatus() {
    dir="$1"
    repo=$(git --work-tree=${dir} --git-dir=${dir}/.git config --get remote.origin.url)
    if [ "$repo" == "$2" ]; then
        echo "'$1':\t uses *OFFICIAL* Pi-Star Repository"
    else
        branch=$(git --work-tree=${dir} --git-dir=${dir}/.git branch | grep '*' | cut -f2 -d ' ')
        ver_cmd=$( git --work-tree=${dir} --git-dir=${dir}/.git rev-parse HEAD | tail -1 | awk '{ print substr($1,1,10) }' ) # last pipe to awk: converts long hash to 10 chars.
        echo -e "'$1':\t uses *W0CHP* Repository, on the '$branch' branch; Version # $ver_cmd"
    fi
}

function DisplayStatus() {
    DisplayRepoStatus "/var/www/dashboard" "$OFFICIAL_DASH_REPO"
    DisplayRepoStatus "/usr/local/sbin" "$OFFICIAL_SBIN_REPO"
}

function DisplayHelp() {
    echo "`basename $0` usage:"
    echo ""
    echo "  -h,   --help                     Display this help text."
    echo "  -id,  --install-dashboard        Install W0CHP dashboard."
    echo "  -idc  --install-dashboard-css    Install W0CHP dashboard WITH custom stylesheet."
    echo "  -rd,  --restore-dashboard        Restore original dashboard."
    echo "  -dfw  --disable-firewall         Disable Pi-Star firewall rules and allow all traffic"
    echo "  -efw  --enable-firewall          Enable Pi-Star firewall rules to defaults and only allow required traffic"
    echo "  -s,   --status                   Display current install, original or W0CHP installations."
    echo ""
}


if [ $# -eq 0 ]; then
    DisplayHelp
    exit 1
fi

if [ -z "$NO_SELF_UPDATE" -a x"$NO_UPDATE_SELF" != "x1" ]; then
    if [[ ${UPDATE_SELF} -ne 0 ]]; then
        UpdateSelf
    else
        rm -f "${SELFUPDATE_SCRIPT}"
    fi
fi

## Parse command line
while [[ $# -gt 0 ]]; do
    key="$1"

    case $key in
	"-id" | "--install-dashboard")
	    echo -e "INFO: Installing the dashboard, this may take some time...\n\n"
        _rw
	    MapCSS
	    InstallDashboard
        CheckFWstate
	    DisplayConfigUpdate
        _ro
	    shift
	    ;;

	"-idc" | "--install-dashboard-css")
	    echo -e "INFO: Installing the dashboard with custom stylesheet, this may take some time...\n\n"
        _rw
	    InstallCSS
	    InstallDashboard
        CheckFWstate
	    DisplayConfigUpdate
        _ro
	    shift
	    ;;

	"-rd" | "--restore-dashboard")
        _rw
	    RestoreDashboard
	    DisplayConfigUpdate
        _ro
	    shift
	    ;;

	"-dfw" | "--disable-firewall")
        _rw
	    DisableFirewall
        _ro
	    shift
	    ;;

	"-efw" | "--enable-firewall")
        _rw
	    EnableFirewall
        _ro
	    shift
	    ;;

	"-s" | "--status")
	    DisplayStatus
	    shift
	    ;;

	"-h" | "--help")
	    DisplayHelp
	    shift
	    ;;

	*)
	    DisplayHelp;
	    exit 1
	    ;;
    esac
done

exit 0

